[
  {
    "testName": "counter",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 5,
    "pass1": 0.5,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<style>\n  .counter {\n    font-size: 24px;\n    display: flex;\n    align-items: center;\n  }\n\n  .counter button {\n    margin: 0 8px;\n    padding: 8px 16px;\n  }\n\n  .counter span {\n    min-width: 24px;\n    text-align: center;\n  }\n</style>\n\n<div class=\"counter\">\n  <button on:click={decrement} data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button on:click={increment} data-testid=\"increment-button\">+</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    font-size: 2em;\n    gap: 10px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = 0;\n  $state count;\n</script>\n\n<style>\n  .counter {\n    font-family: sans-serif;\n    text-align: center;\n    margin-top: 20px;\n  }\n</style>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/counter_sample3_36c65fcb0f778485/Component.svelte:5:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state { let count = 0; }\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/counter_sample5_e3ea88dd942e02a5/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  const decrement = () => {\n    count--;\n  };\n\n  const increment = () => {\n    count++;\n  };\n</script>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>\n\n<div class=\"counter\">\n  <button on:click={decrement} data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button on:click={increment} data-testid=\"increment-button\">+</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { writable, computed } from 'svelte/store';\n\n  let count = writable(0);\n\n  function increment() {\n    count.set((currentCount) => currentCount + 1);\n  }\n\n  function decrement() {\n    count.set((currentCount) => currentCount - 1);\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  0\u001b[39m\nReceived:\n\u001b[31m  [object Object]\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  0\u001b[39m\nReceived:\n\u001b[31m  [object Object]\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  0\u001b[39m\nReceived:\n\u001b[31m  [object Object]\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  2\u001b[39m\nReceived:\n\u001b[31m  [object Object]\u001b[39m"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let count = 0;\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/counter_sample8_82528ef45593c148/Component.svelte:4:2 Cannot use `export let` in runes mode â€” use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<!-- Counter.svelte -->\n<script>\n  let $state count = 0;\n\n  function increment() {\n    $state count += 1;\n  }\n\n  function decrement() {\n    $state count -= 1;\n  }\n</script>\n\n<style>\n  .counter {\n    font-family: sans-serif;\n    max-width: 400px;\n    text-align: center;\n    margin: 0 auto;\n  }\n</style>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/counter_sample9_57933224cfe526e5/Component.svelte:5:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "derived",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte';\n\n  const number = $state(5);\n  const doubled = $derived(number, n => n * 2);\n\n  function increment() {\n    number.set(number.get() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample0_c5811d4cfe2701a9/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {@=> number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {@=> doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>\n\n<script>\n  const $state number = 5;\n  const $derived doubled = () => number * 2;\n</script>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample1_6c21e4d7f7c21df1/Component.svelte:10:15 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $derived, $state } from 'svelte/5/runtime';\n\n  const number = $state(5);\n  const doubled = $derived(number, n => n * 2);\n\n  $effect(() => {\n    console.log(\"Number doubled:\", doubled);\n  });\n\n  const increment = () => {\n    number.set(number.get() + 1);\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample2_4851992c27088db4/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived * 2}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived_sample3_53e2856efd8fb5da/Component.svelte:4:41 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte';\n\n  let number = $state(5);\n  const doubled = $derived(number, (n) => n * 2);\n</script>\n\n<p data-testid=\"number-value\">Number: {number}</p>\n<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n<button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample4_68b24db1959dd414/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number, (n) => n * 2);\n\n  function increment() {\n    number.update((n) => n + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {#each [number] [n]}{n}{/each}</p>\n  <p data-testid=\"doubled-value\">Doubled: {#each [doubled] [d]}{d}{/each}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived_sample5_1d1e9d016dc4161a/Component.svelte:5:16 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from '@svelte/store/derived';\n\n  const number = $state(5);\n  const doubled = $derived(number, $ => $ * 2);\n\n  function increment() {\n    number.set(number.get() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample6_88d236b1005bd6c6/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(() => number * 2);\n\n  function incrementNumber() {\n    number += 1;\n  }\n\n  // The component structure is as follows:\n</script>\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={incrementNumber}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 12\u001b[39m\nReceived:\n\u001b[31m  Doubled: () => get(number) * 2\u001b[39m"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number, (num) => num * 2);\n\n  function incrementNumber() {\n    number = number + 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={incrementNumber}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived_sample8_6c43a9c7d0757cef/Component.svelte:5:16 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\timport { $state, $derived } from 'svelte-rune';\n\n\tlet number = $state(5);\n\tlet doubled = $derived(number, n => n * 2);\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" on:click={() => number.set(number.get() + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample9_1f3360253099ce18/Component.svelte:4:10 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "derived-by",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte';\n\n  const text = $state('');\n  const wordCount = $derived.by(text, (t) => t.split(/\\s+/).filter(Boolean).length);\n  const charCount = $derived.by(text, (t) => t.length);\n  const isLong = $derived.by(wordCount, (count) => count > 15);\n\n  const clearText = () => {\n    text.set('');\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample0_6f88c2d33b936249/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from '$lib/derived';\n\n  const text = $state('');\n  const wordCount = $derived.by(text, t => t.split(' ').filter(word => word !== '').length);\n  const charCount = $derived.by(text, t => t.length);\n  const isLong = $derived.by(wordCount, count => count > 15);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text.set('')}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample1_43196266b21d1dd2/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte/internal';\n  \n  let text = $state('');\n\n  const wordCount = $derived.by(text, t => (t.split(' ').filter(w => w.length > 0).length));\n  const charCount = $derived.by(text, t => t.length);\n  const isLong = $derived.by(wordCount, wc => wc > 15);\n  const lengthIndicator = $derived.by(isLong, l => l ? 'Long' : 'Short');\n\n  function handleClear() {\n    text.set('');\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={handleClear}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$lengthIndicator} text</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample2_a6280478c76663ed/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$state(text)} />\n  <button data-testid=\"clear-button\" on:click={() => $state(text) = ''}>Clear</button>\n  <script>\n    let text = '';\n\n    $derived.by({\n      words: () => text.split(/\\s+/).filter(Boolean).length,\n      chars: () => text.length,\n      isLong: () => text.split(/\\s+/).filter(Boolean).length > 15\n    });\n\n    $effect(() => {\n      const words = $derived.words();\n      const chars = $derived.chars();\n      const status = $derived.isLong() ? 'Long text' : 'Short text';\n      document.querySelector('[data-testid=\"word-count\"]').textContent = Words: ${words};\n      document.querySelector('[data-testid=\"char-count\"]').textContent = Characters: ${chars};\n      document.querySelector('[data-testid=\"length-indicator\"]').textContent = Status: ${status};\n    });\n  </script>\n  <div>\n    <p data-testid=\"word-count\">Words: 0</p>\n    <p data-testid=\"char-count\">Characters: 0</p>\n    <p data-testid=\"length-indicator\">Status: Short text</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample3_970ed34ae421ac46/Component.svelte:5:53 Assigning to rvalue\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n  import { $state, $derived } from '$lib/rune/runehere';\n\n  const textContent = $state('');\n\n  const wordCount = $derived.by(textContent, (text) => text.trim() ? text.split(/\\s+/).length : 0);\n  const charCount = $derived.by(textContent, (text) => text.length);\n  const isLong = $derived.by(wordCount, count => count > 15);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={textContent} />\n  <button data-testid=\"clear-button\" on:click={() => textContent.set('')}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {#each [wordCount.get()], word => { word }}</p>\n    <p data-testid=\"char-count\">Characters: {#each [charCount.get()], char => { char }}</p>\n    <p data-testid=\"length-indicator\">Status: {#if isLong.get()}Long text{:else}Short text{/if}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample4_1e1b9239dedf0cec/Component.svelte:17:70 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte';\n\n  const text = $state('');\n\n  const wordCount = $derived.by(text, input => {\n    return input.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  });\n\n  const charCount = $derived.by(text, input => input.length);\n\n  const isLong = $derived.by(text, input => {\n    return input.trim().split(/\\s+/).filter(word => word.length > 0).length > 15 ? \n      \"Status: Long text\" : \n      \"Status: Short text\";\n  });\n\n  const clearText = () => {\n    text.set('');\n  };\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text}\n  />\n  <button \n    data-testid=\"clear-button\"\n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">\n      Words: {wordCount}\n    </p>\n    <p data-testid=\"char-count\">\n      Characters: {charCount}\n    </p>\n    <p data-testid=\"length-indicator\">\n      {isLong}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample5_50e4f0a78da5af9c/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect, $derived } from 'svelte';\n\n  let text = $state '';\n\n  const wordCount = $derived.by(text, t => t.split(' ').filter(word => word).length);\n  const charCount = $derived.by(text, t => t.length);\n  const isLong = $derived.by(wordCount, count => count > 15);\n\n  const clearText = () => {\n    $effect(() => {\n      text = '';\n    });\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample6_fa56c70e1cc426e5/Component.svelte:6:20 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  #const text = $state('');\n  #const wordCount = $derived.by(text, t => t.trim().split(/\\s+/).filter(Boolean).length);\n  #const charCount = $derived.by(text, t => t.length);\n  #const isLong = $derived.by(wordCount, count => count > 15);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text.set('')}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample7_49991b48f210469e/Component.svelte:4:2 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived, $by } from '$lib/rune';\n\n  const text = $state('');\n  const wordCount = $by(text, (t) => t.split(/\\s+/).filter(Boolean).length);\n  const charCount = $by(text, (t) => t.length);\n  const isLong = $by(wordCount, (c) => c > 15);\n\n  const clearText = () => {\n    text.set('');\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample8_1683fdc1769a2be1/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { derived, state, effect } from 'svelte/rune';\n\n  let inputText;\n\n  const textState = state('');\n  effect(() => {\n    textState.set(inputText);\n  });\n\n  const wordCount = derived.by(\n    textState,\n    text => text.split(/\\s+/).length\n  );\n\n  const charCount = derived.by(\n    textState,\n    text => text.length\n  );\n\n  const isLongText = derived.by(\n    wordCount,\n    count => count > 15 ? 'Long text' : 'Short text'\n  );\n\n  const clearInput = () => {\n    inputText = '';\n    textState.set('');\n  };\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    bind:value={inputText}\n    type=\"text\"\n  />\n  <button\n    data-testid=\"clear-button\"\n    on:click={clearInput}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLongText}</p>\n  </div>\n</div>",
        "success": false,
        "errors": ["Missing \"./rune\" specifier in \"svelte\" package"]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "each",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  const addGeorge = () => {\n    characters = [...characters, \"George\"];\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as char (char)}\n      <li data-testid=\"character\">{char}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  $effect(() => {\n    if (!characters.includes('George')) {\n      characters = [...characters, 'George'];\n    }\n  });\n\n  function addGeorge() {\n    if (!characters.includes('George')) {\n      characters = [...characters, 'George'];\n    }\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const characters = [];\n\n  $state characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  function addGeorge() {\n    $set characters, [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/each_sample3_fd4f47fe282e0cc9/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button on:click={addGeorge} data-testid=\"add-george-button\">Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  $effect(() => {\n    console.log(\"Characters list reactivity update:\", characters);\n  });\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as char (char)}\n      <li data-testid=\"character\">{char}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  function addGeorge() {\n    characters.push('George');\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  $effect(() => {\n    const button = $addCharacter;\n    button.on('click', () => {\n      characters.push('George');\n    });\n  });\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $characters as character}\n      <li data-testid=\"character\">\n        {character}\n      </li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" use:$add = \"addCharacter\">\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/each_sample9_fca3f681ae00ab30/Component.svelte:22:54 Directive value must be a JavaScript expression enclosed in curly braces\nhttps://svelte.dev/e/directive_invalid_value"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "effect",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'svelte';\n\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  }, number);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample0_f42abbedc7da4251/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(10);\n\n  $effect(() => {\n    doubled = number * 2;\n  }, [number]);\n  \n  let increment = () => {\n    number += 1;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/effect_sample1_4b11d8434c19009f/Component.svelte:7:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'svelte';\n\n  const number = $state(5);\n  const doubled = $effect(() => number * 2);\n\n  function incrementNumber() {\n    number.update(n => n + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={incrementNumber}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample2_aa602862f9f83dd0/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5;\n  $state doubled = 5 * 2;\n\n  $effect _ => doubled = number * 2;\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample3_bb4b34c766c47f5a/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'solid-js';\n\n  const number = $state(5);\n  const doubled = $effect(() => number() * 2);\n\n  function increment() {\n    number(number() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample4_d3242ae3fb5b3440/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let number = $state(5);\n  export let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/effect_sample5_999ef29d9e2c7a0f/Component.svelte:4:2 Cannot use `export let` in runes mode â€” use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state number = 5;\n  let $state doubled;\n  let $effect = () => doubled = number * 2;\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample6_e41afe73c5ea036a/Component.svelte:4:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from '$lib/rune';\n\n  let number = $state(5);\n\n  $effect(() => {\n    let doubled = number * 2;\n    return doubled;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$get(number)}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$get(doubled)}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample7_73e1a40a6c7d94ef/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n$state number = 5\n$effect $doubleNumber = number * 2\nbackdrop: 'svelte'\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubleNumber}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "number is not defined\n\n\tin <unknown>\n",
          "number is not defined\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'svelte/internal';\n\n  let number = $state(5);\n  let doubled;\n\n  $effect(() => {\n    doubled = number * 2;\n  }, [number]);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample9_a5d914ddff780261/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "hello-world",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 7,
    "pass1": 0.7,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let greeting = \"Hello, World!\";\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">{greeting}</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 1rem auto;\n    }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<hello-world> Hello, World!</hello-world>\n\n<style>\n    .greeting {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        margin: 1rem;\n        font-size: 2rem;\n        color: blue;\n    }\n</style>",
        "success": false,
        "errors": [
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<hello-world>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</hello-world>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m",
          "Unable to find an element by: [data-testid=\"greeting\"]\n\nIgnored nodes: comments, script, style\n\u001b[36m<body>\u001b[39m\n  \u001b[36m<div>\u001b[39m\n    \u001b[36m<hello-world>\u001b[39m\n      \u001b[0mHello, World!\u001b[0m\n    \u001b[36m</hello-world>\u001b[39m\n    \u001b[0m\u001b[0m\n  \u001b[36m</div>\u001b[39m\n\u001b[36m</body>\u001b[39m"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<!-- HelloWorld.svelte -->\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let greeting = 'Hello, World!';\n</script>\n\n<style>\n    .greeting {\n        color: blue;\n        margin: 20px;\n        text-align: center;\n    }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">{greeting}</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { onMount } from 'svelte';\n\n  onMount(() => {\n    // Add any required initialization logic here (not needed for this example)\n  });\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let message = 'Hello, World!';\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">{message}</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/hello-world_sample7_a21e7d8b62b8bc85/Component.svelte:4:2 Cannot use `export let` in runes mode â€” use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let info = 'Hello, World!';\n</script>\n\n<div class=\"greeting\" data-testid=\"greeting\">\n  {info}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 50px;\n    font-size: 20px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n    export let text = \"Hello, World!\"\n</script>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 10px;\n    }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    {text}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/hello-world_sample9_467223dfadb026c1/Component.svelte:4:4 Cannot use `export let` in runes mode â€” use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "inspect",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $effect } from 'svelte';\n\n  let text = $state('Hello world');\n\n  $inspect(text).with((value) => {\n    console.log('Input value updated:', value);\n  });\n\n  $effect(() => {\n    $inspect.trace(() => {\n      console.log('Input value trace:', text);\n    });\n  }, text);\n\n  let charCount = $state(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample0_aa272ae3c87c5798/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = 'Hello world';\n\n  $inspect(text);\n  $inspect(text).with((value) => console.log('Input value:', value));\n  \n  $effect(() => {\n    console.log($inspect.trace(), 'Effect executed on input change');\n  });\n\n  $state(text, 'Hello world');\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample1_8dd3438a9b995fd6/Component.svelte:10:16 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect, $inspect } from 'svelte/internal';\n\n  const text = $stateç»³('Hello world');\n\n  $inspect(text);\n  \n  $inspect(text).with(value => {\n    console.log(Text updated to \"${value}\");\n  });\n\n  const charCount = $stateç»³(0);\n  $effectç»³(() => {\n    charCount.set(text.get().length);\n    console.log($inspect.trace());\n  }, text);\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text.get()}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount.get()}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample2_3b83363da9a683a8/Component.svelte:11:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect } from 'svelte/runtime';\n  \n  let text = $state('Hello world');\n\n  $inspect(text).with((newText) => {\n    console.log('Input updated to:', newText);\n  });\n\n  $effect(() => {\n    console.log('Trace: ', $inspect(text).trace());\n  });\n\n  $: textLength = text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {textLength}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample3_67bbe9551d2958ff/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import {$state, $inspect, $effect} from 'svelte/rune';\n\n  let text = $state(\"Hello world\");\n\n  $inspect(text);\n  $inspect(text).with((value) => console.log(\"Input updated:\", value));\n\n  $effect(() => {\n    console.trace(\"Input changed:\", text);\n  });\n\n</script>\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value{text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample4_fa76b67561b007bb/Component.svelte:4:10 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { afterUpdate, onMount } from 'svelte';\n  let text = $state(\"Hello world\");\n\n  $inspect(text).with((newValue) => {\n    console.log(\"Text updated to:\", newValue);\n  });\n\n  afterUpdate(() => {\n    $inspect.trace();\n  });\n\n  onMount(() => {\n    const unsub = $inspect(text).subscribe((value) => {\n      console.log(\"Text subscribed value:\", value);\n    });\n    return unsub;\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>\n\n<style>\n  /* Add any styles you want here */\n</style>\nThis code snippet covers all the requirements stated for the $inspect rune component task. It demonstrates the $inspect rune's basic usage, its .with method for custom callbacks, and the .trace() function inside an effect. Additionally, it includes the necessary data-testid attributes for testability and displays the current text and character count. Please note that the use of afterUpdate and onMount is to simulate the behavior of an effect running when the input changes, as detailed in requirement 4.",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample5_9d218c23df977bbc/Component.svelte:4:11 afterUpdate cannot be used in runes mode\nhttps://svelte.dev/e/runes_mode_invalid_import"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { useState, useInspect, useEffect } from '$scipts/svelte-reactive';\n\n  let text = useState('Hello world');\n\n  const inspectText = useInspect(text);\n  console.log('Initial Text:', inspectText);\n\n  inspectText.with((v) => {\n    console.log('Text Updated:', v);\n  });\n\n  useEffect(() => {\n    inspectText.trace();\n  }, [text]);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <p data-testid=\"text-value\">Current text: \"{$text}\"</p>\n  <p data-testid=\"char-count\">Character count: {$text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "Failed to resolve import \"$scipts/svelte-reactive\" from \"tmp/samples/openrouter/inspect_sample6_dfbc753112307d0d/Component.svelte\". Does the file exist?"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$state('text').with({default: 'Hello world'})} />\n  <p data-testid=\"text-value\">&lbrace;&lbrace; $inspect({text}).log('Current text').with((value) =&gt; console.log(value)) &rbrace;&rbrace;</p>\n  <p data-testid=\"char-count\">&lbrace;&lbrace; $inspect({text}).trace().length &rbrace;&rbrace;</p>\n</div>\n\n$state('text')\n$inspect({text}).log('Current text').with((value) =&gt; console.log(value))\n$effect({text}, () =&gt; console.log('Text changed:', {text}))\n\n<style>\n  input {\n    margin-bottom: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample7_610019f7d971c6ff/Component.svelte:4:46 Can only bind to an Identifier or MemberExpression or a `{get, set}` pair\nhttps://svelte.dev/e/bind_invalid_expression"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n  $state({\n    text: \"Hello world\"\n  });\n\n  $inspect.text.trace();\n\n  $inspect(text, {\n    with: (value) => console.log(Text updated to: ${value})\n  });\n\n  $effect(() => {\n    // This effect triggers when 'text' changes, due to the reference to 'text' inside the function\n    console.log(\"Text changed, triggering effect\");\n\n    // $inspect.trace() provides more detailed trace information\n    $inspect.trace();\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample8_ca5d112ff7d1fded/Component.svelte:11:38 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $effect } from 'svelte/rune';\n\n  const text = $state(\"Hello world\");\n  \n  $inspect(...text).subscribe(val => console.log('Value:', val));\n  $inspect(...text).with((val, update) => console.log('Changed:', val)).subscribe();\n\n  $effect(() => {\n    const { id, value, rendered } = $inspect.trace();\n    console.log('Input trace:', { id, value, rendered });\n  }, text);\n\n  const charCount = $state(text.length);\n  $effect(() => {\n    charCount.set(text.length);\n  }, text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample9_57c6c72a284a5802/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "props",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let $props = {\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  };\n\n  let $state = {\n    count: $props.count\n  };\n\n  function incrementCount() {\n    $state.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample0_1754c73db5bf4820/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\nimport { $props, $state } from 'svelte';\n\nconst { name = 'World', count = 0, showDetails = false } = $props;\nconst $state countOutput = count;\n\nfunction incrementCount() {\n  countOutput.set(countOutput.get() + 1);\n}\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {countOutput}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {countOutput}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample1_b177924506434592/Component.svelte:9:40 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $create, $effect, $props } from 'svelte';\n\n  export const { props } = $create({\n    name: String,\n    count: Number,\n    showDetails: Boolean,\n    defaults: { name: 'World', count: 0, showDetails: false }\n  });\n\n  let count = props.count;\n\n  const increment = () => {\n    count += 1;\n  };\n\n  $effect(() => {\n    props.count = count;\n  }, count);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {props.name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {props.showDetails ? 'true' : 'false'}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample2_1ca24765e0f62c42/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<pre><code>&lt;script&gt;\n  export const $props = {\n    name: { $type: String, $default: 'World' },\n    count: { $type: Number, $default: 0 },\n    showDetails: { $type: Boolean, $default: false }\n  };\n\n  let $count = $props.count;\n\n  function increment() {\n    $count += 1;\n  }\n&lt;/script&gt;\n\n&lt;div&gt;\n  &lt;h1 data-testid=\"name-display\"&gt;Hello, {$props.name}&lt;/h1&gt;\n  &lt;p data-testid=\"count-display\"&gt;Count: {$count}&lt;/p&gt;\n  &lt;button data-testid=\"increment-button\" on:click={increment}&gt;Increment&lt;/button&gt;\n\n  {#if $props.showDetails}\n    &lt;div data-testid=\"details\"&gt;\n      &lt;p&gt;Name is {$props.name}&lt;/p&gt;\n      &lt;p&gt;Count is {$count}&lt;/p&gt;\n      &lt;p&gt;ShowDetails is {$props.showDetails}&lt;/p&gt;\n    &lt;/div&gt;\n  {/if}\n&lt;/div&gt;\n</code></pre>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample3_59ecba51559f5ccc/Component.svelte:5:8 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  interface Props {\n    name: string,\n    count: number,\n    showDetails: boolean\n  }\n\n  let $props: Props = {\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  };\n\n  let $state count = $props.count;\n\n  function incrementCount() {\n    $state count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state count}</p>\n  <button on:click={incrementCount} data-testid=\"increment-button\">Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample4_26cb2c3ea47383c3/Component.svelte:4:2 The keyword 'interface' is reserved\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let {\n    name = \"World\",\n    count = 0,\n    showDetails = false\n  } = $props;\n\n  let $state.count = count;\n  \n  const incrementCount = () => {\n    $state.count += 1;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {showDetails.toString()}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample5_47e0b8dcf27ab637/Component.svelte:10:12 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n$props: {\n  name: 'World',\n  count: 0,\n  showDetails: false\n}\n\n$state count\n\n<script>\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {$props.showDetails ? 'true' : 'false'}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample6_798ff252ae67d38a/Component.svelte:4:6 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props {\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  }\n\n  $state count, setCount = $props.count;\n\n  function increment() {\n    setCount(count + 1);\n  }\n</script>\n\n<h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n<p data-testid=\"count-display\">Count: {count}</p>\n<button on:click={increment} data-testid=\"increment-button\">Increment</button>\n\n{#if $props.showDetails}\n  <div data-testid=\"details\">\n    <p>Name is {$props.name}</p>\n    <p>Count is {count}</p>\n    <p>ShowDetails is {$props.showDetails}</p>\n  </div>\n{/if}",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample7_2bee3c17d88bc0ad/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props = {\n    name: \"World\",\n    count: 0,\n    showDetails: false,\n  }\n  $state = {\n    count: $props.count,\n  }\n\n  function incrementCount() {\n    $state.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$props.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>\n\n<!-- Example usage:\n<PropsDemo name=\"Alice\" count=\"10\" showDetails=\"true\" />\n-->",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample8_98b3195c8753216e/Component.svelte:4:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  }\n  $state count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$props.count}</p>\n  <button on:click={() => count += 1} data-testid=\"increment-button\">Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample9_c6e2b972f72c1f6d/Component.svelte:9:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  },
  {
    "testName": "snippets",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  const title = (title) => <span data-testid=\"book-title\">{title}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample0_fb471db962980114/Component.svelte:5:27 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  $runes({\n    title: ({ value }) => <span data-testid=\"book-title\">{value}</span>\n  });\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title {value: book}}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample1_b6d3f545c87739f1/Component.svelte:6:26 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  const title = (bookTitle) => (\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  );\n\n  const BookList = () => (\n    <ul>\n      {#each books as book}\n        <li data-testid=\"book-item\">\n          {@render title(book)}\n        </li>\n      {/each}\n    </ul>\n  );\n</script>\n\n<BookList />",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample2_c4efc0adf6f6a389/Component.svelte:11:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  $create title(title) {\n    return <span data-testid=\"book-title\">{title}</span>;\n  }\n  \n  $create renderTitle(book) {\n    return <li data-testid=\"book-item\">{@render title(book)}</li>;\n  }\n  \n  const listItems = books.map(book => renderTitle(book));\n</script>\n\n<ul>\n  {@render ...listItems}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample3_bbbf0f59d5145a90/Component.svelte:6:10 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    'The Lord of the Rings',\n    'To Kill a Mockingbird',\n    '1984'\n  ];\n\n  $snippet: 'title';\n  $render(title) {\n    return <li data-testid=\"book-item\"><span data-testid=\"book-title\">{title}</span></li>;\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    {@render title=book}\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample4_c9e81d269717b4d8/Component.svelte:11:17 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = ['The Lord of the Rings', 'To Kill a Mockingbird', '1984'];\n\n  // Define the title snippet\n  const title = ($$, title) => (\n    <span data-testid=\"book-title\">{title}</span>\n  );\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title, {title: book}}\n    </li>\n  {:else}\n    <li>No books available</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample5_16023c6ffd377aad/Component.svelte:8:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  $group(title => (\n    <span data-testid=\"book-title\">{title}</span>\n  ), {\n    title: (title) => title\n  });\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {$render book: {title: book}}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample6_727518baf72776df/Component.svelte:7:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n    const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n    $define macro $title(book) {\n        return Fragment\n            <span data-testid=\"book-title\">{book}</span>\n        ;\n    };\n</script>\n\n<ul>\n    {#each books as book}\n        <li data-testid=\"book-item\">{@render $title(book)}</li>\n    {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample7_da0002eef3da2e76/Component.svelte:6:12 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n    let TitleSnippet = $snippet({name:'title'}, ({title}) => \n        <span data-testid=\"book-title\">${title}</span>\n    );\n\n</script>\n\n<ul>\n    {#each books as book}\n        <li data-testid=\"book-item\">{@render TitleSnippet(book)}</li>\n    {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample8_fd3d32bc2a7ca759/Component.svelte:7:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  const title = (t) => html<span data-testid=\"book-title\">${t}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample9_d52abab81bfb9d5e/Component.svelte:10:33 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-09-16T16:49:01.779Z"
  }
]
