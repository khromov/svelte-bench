[
  {
    "testName": "counter",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\n\tconst increment = () => {\n\t\tcount++;\n\t};\n\n\tconst decrement = () => {\n\t\tcount--;\n\t};\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\tgap: 10px;\n\t\talign-items: center;\n\t\tpadding: 10px;\n\t\tborder: 1px solid #ccc;\n\t\tborder-radius: 5px;\n\t}\n\n\t.counter span {\n\t\tfont-size: 1.5em;\n\t\tmin-width: 30px;\n\t\ttext-align: center;\n\t}\n\n\t.counter button {\n\t\tpadding: 5px 10px;\n\t\tfont-size: 1em;\n\t\tcursor: pointer;\n\t}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\n\tconst increment = () => {\n\t\tcount++;\n\t};\n\n\tconst decrement = () => {\n\t\tcount--;\n\t};\n</script>\n\n<div class=\"counter\">\n\t<button on:click={decrement} data-testid=\"decrement-button\">-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button on:click={increment} data-testid=\"increment-button\">+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\tgap: 10px;\n\t\talign-items: center;\n\t\tpadding: 10px;\n\t\tborder: 1px solid #ccc;\n\t\tborder-radius: 5px;\n\t}\n\n\t.counter button {\n\t\tpadding: 5px 10px;\n\t\tfont-size: 16px;\n\t\tcursor: pointer;\n\t}\n\n\t.counter span {\n\t\tfont-size: 20px;\n\t\tfont-weight: bold;\n\t\tmin-width: 30px;\n\t\ttext-align: center;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\n\tconst increment = () => {\n\t\tcount++;\n\t};\n\n\tconst decrement = () => {\n\t\tcount--;\n\t};\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\tgap: 1em;\n\t\talign-items: center;\n\t}\n\tbutton {\n\t\tpadding: 0.5em 1em;\n\t\tfont-size: 1.2em;\n\t}\n\tspan {\n\t\tfont-size: 1.5em;\n\t\tmin-width: 1em;\n\t\ttext-align: center;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\n\tconst increment = () => {\n\t\tcount++;\n\t};\n\n\tconst decrement = () => {\n\t\tcount--;\n\t};\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\tgap: 1em;\n\t\talign-items: center;\n\t\tpadding: 10px;\n\t\tborder: 1px solid #ccc;\n\t\tborder-radius: 5px;\n\t}\n\n\tspan {\n\t\tfont-size: 1.5em;\n\t\tmin-width: 30px;\n\t\ttext-align: center;\n\t}\n\n\tbutton {\n\t\tpadding: 5px 10px;\n\t\tfont-size: 1.2em;\n\t\tcursor: pointer;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\n\tconst increment = () => {\n\t\tcount++;\n\t};\n\n\tconst decrement = () => {\n\t\tcount--;\n\t};\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\tgap: 1em;\n\t\talign-items: center;\n\t\tpadding: 1em;\n\t\tborder: 1px solid #ccc;\n\t\tborder-radius: 4px;\n\t}\n\n\t.counter span {\n\t\tfont-weight: bold;\n\t\tmin-width: 20px;\n\t\ttext-align: center;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  const increment = () => {\n    count += 1;\n  };\n\n  const decrement = () => {\n    count -= 1;\n  };\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    /* Basic styling to show structure, if necessary, otherwise rely on default browser styles */\n    display: flex;\n    align-items: center;\n    gap: 1em;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\n\tconst increment = () => {\n\t\tcount++;\n\t};\n\n\tconst decrement = () => {\n\t\tcount--;\n\t};\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\tgap: 1em;\n\t\talign-items: center;\n\t\tfont-family: sans-serif;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n</script>\n\n<div class=\"counter\">\n\t<button on:click={() => count--} data-testid=\"decrement-button\">-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button on:click={() => count++} data-testid=\"increment-button\">+</button>\n</div>\n\n<style>\n\t.counter {\n\t\t/* Minimal CSS required by task */\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 10px;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" onclick={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" onclick={() => count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet count = $state(0);\n\n\tconst increment = () => {\n\t\tcount++;\n\t};\n\n\tconst decrement = () => {\n\t\tcount--;\n\t};\n</script>\n\n<div class=\"counter\">\n\t<button data-testid=\"decrement-button\" onclick={decrement}>-</button>\n\t<span data-testid=\"count-value\">{count}</span>\n\t<button data-testid=\"increment-button\" onclick={increment}>+</button>\n</div>\n\n<style>\n\t.counter {\n\t\tdisplay: flex;\n\t\tgap: 1em;\n\t\talign-items: center;\n\t\tfont-size: 20px;\n\t}\n\n\tbutton {\n\t\tpadding: 5px 15px;\n\t\tfont-size: inherit;\n\t\tcursor: pointer;\n\t}\n</style>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "derived",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tconst doubled = $derived(number * 2);\n\n\tfunction increment() {\n\t\tnumber++;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let number = $state(5);\n    let doubled = $derived(number * 2);\n\n    const increment = () => {\n        number += 1;\n    };\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {number}</p>\n    <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n    <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tconst doubled = $derived(number * 2);\n\n\tfunction increment() {\n\t\tnumber++;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tconst doubled = $derived(number * 2);\n\n\tfunction increment() {\n\t\tnumber++;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $derived(number * 2);\n\n\tconst increment = () => {\n\t\tnumber++;\n\t};\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $derived(number * 2);\n\n\tconst increment = () => {\n\t\tnumber++;\n\t};\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $derived(number * 2);\n\n\tfunction increment() {\n\t\tnumber++;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  const doubled = $derived(number * 2);\n\n  const increment = () => {\n    number++;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\n\tconst doubled = $derived(number * 2);\n\n\tconst increment = () => {\n\t\tnumber++;\n\t};\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tconst doubled = $derived(number * 2);\n\n\tconst increment = () => {\n\t\tnumber += 1;\n\t};\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "derived-by",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 8,
    "pass1": 0.7999999999999999,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    /**\n     * Function to perform complex analysis on the input text.\n     * This function is pure and calculates all necessary metrics based on the current text value.\n     * @param {string} t - The current text input.\n     * @returns {{wordCount: number, charCount: number, isLong: boolean}}\n     */\n    function analyzeText(t) {\n        const charCount = t.length;\n        \n        // Calculate word count: trim whitespace, split by one or more spaces, and filter out empty strings\n        const words = t.trim().split(/\\s+/).filter(w => w.length > 0);\n        const wordCount = words.length;\n        \n        const isLong = wordCount > 15;\n\n        return {\n            wordCount,\n            charCount,\n            isLong\n        };\n    }\n\n    // Use $derived.by to run the analysis function whenever 'text' changes.\n    // 'analysis' becomes a reactive object containing the results.\n    const analysis = $derived.by(() => analyzeText(text));\n\n    function handleClear() {\n        text = '';\n    }\n</script>\n\n<div>\n    <input \n        data-testid=\"text-input\" \n        type=\"text\" \n        bind:value={text} \n        placeholder=\"Enter text here...\"\n        style=\"width: 100%; padding: 8px; margin-bottom: 10px;\"\n    />\n    \n    <button data-testid=\"clear-button\" onclick={handleClear}>Clear</button>\n    \n    <div style=\"margin-top: 15px; border-top: 1px solid #eee; padding-top: 10px;\">\n        <p data-testid=\"word-count\">Words: {analysis.wordCount}</p>\n        <p data-testid=\"char-count\">Characters: {analysis.charCount}</p>\n        <p data-testid=\"length-indicator\">Status: {analysis.isLong ? 'Long text' : 'Short text'}</p>\n    </div>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    // Use $derived.by to compute multiple related values in a single block\n    const analysis = $derived.by(() => {\n        const charCount = text.length;\n\n        // Calculate word count (handle multiple spaces and leading/trailing whitespace)\n        const words = text.trim().split(/\\s+/).filter(w => w.length > 0);\n        const wordCount = words.length;\n\n        const isLong = wordCount > 15;\n\n        return {\n            wordCount,\n            charCount,\n            isLong\n        };\n    });\n\n    function clearText() {\n        text = '';\n    }\n</script>\n\n<div>\n    <input \n        data-testid=\"text-input\" \n        type=\"text\" \n        bind:value={text} \n        placeholder=\"Start typing...\"\n        style=\"width: 300px; padding: 5px; margin-right: 10px;\"\n    />\n    \n    <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n    \n    <div style=\"margin-top: 15px;\">\n        <p data-testid=\"word-count\">Words: {analysis.wordCount}</p>\n        <p data-testid=\"char-count\">Characters: {analysis.charCount}</p>\n        <p data-testid=\"length-indicator\">\n            Status: {analysis.isLong ? 'Long text (over 15 words)' : 'Short text'}\n        </p>\n    </div>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    function analyzeText(currentText) {\n        const charCount = currentText.length;\n        \n        // Split by whitespace, handling potential multiple spaces and leading/trailing spaces\n        const words = currentText.trim() === '' ? [] : currentText.trim().split(/\\s+/).filter(w => w.length > 0);\n        const wordCount = words.length;\n        \n        const isLong = wordCount > 15;\n        \n        return { wordCount, charCount, isLong };\n    }\n\n    const stats = $derived.by(() => analyzeText(text));\n\n    const clearText = () => {\n        text = '';\n    };\n</script>\n\n<div>\n    <input \n        data-testid=\"text-input\" \n        type=\"text\" \n        placeholder=\"Enter text here...\"\n        bind:value={text} \n    />\n    <button \n        data-testid=\"clear-button\" \n        on:click={clearText}\n    >\n        Clear\n    </button>\n    \n    <div>\n        <p data-testid=\"word-count\">Words: {stats.wordCount}</p>\n        <p data-testid=\"char-count\">Characters: {stats.charCount}</p>\n        <p data-testid=\"length-indicator\">Status: {stats.isLong ? 'Long text (15+ words)' : 'Short text'}</p>\n    </div>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    // Function to perform complex analysis\n    function analyzeText(t) {\n        // Character count is simple length\n        const charCount = t.length;\n        \n        // Word count: split by whitespace, filter out empty strings resulting from multiple spaces\n        const words = t.trim().split(/\\s+/).filter(Boolean);\n        const wordCount = words.length;\n        \n        // Length requirement check\n        const isLong = wordCount > 15;\n\n        return {\n            wordCount,\n            charCount,\n            isLong\n        };\n    }\n\n    // Use $derived.by to calculate the analysis whenever 'text' changes\n    const analysis = $derived.by(() => analyzeText(text));\n\n    function handleClear() {\n        text = '';\n    }\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={text}\n    placeholder=\"Start typing...\"\n    style=\"width: 300px; padding: 5px;\"\n  />\n  <button data-testid=\"clear-button\" onclick={handleClear} style=\"margin-left: 10px;\">Clear</button>\n  \n  <div style=\"margin-top: 15px;\">\n    <p data-testid=\"word-count\">Words: {analysis.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {analysis.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {analysis.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state('');\n\n\t/**\n\t * Function used by $derived.by to perform complex text analysis.\n\t * @param {string} t\n\t */\n\tfunction analyzeText(t) {\n\t\tconst charCount = t.length;\n\n\t\t// Calculate word count: split by whitespace, filter out empty matches\n\t\tconst trimmedText = t.trim();\n\t\tconst words = trimmedText === '' ? [] : trimmedText.split(/\\s+/).filter(w => w.length > 0);\n\t\tconst wordCount = words.length;\n\n\t\tconst isLong = wordCount > 15;\n\t\tconst lengthStatus = isLong ? 'Long text' : 'Short text';\n\n\t\treturn {\n\t\t\twordCount,\n\t\t\tcharCount,\n\t\t\tlengthStatus\n\t\t};\n\t}\n\n\t// Use $derived.by to calculate the analysis object whenever 'text' changes\n\tconst analysis = $derived.by(() => analyzeText(text));\n\n\tfunction clearText() {\n\t\ttext = '';\n\t}\n</script>\n\n<div>\n\t<input\n\t\tdata-testid=\"text-input\"\n\t\ttype=\"text\"\n\t\t$bind:value={text}\n\t\tplaceholder=\"Enter your text here...\"\n\t\tstyle=\"width: 300px; padding: 5px; margin-right: 10px;\"\n\t/>\n\t<button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n\t<div style=\"margin-top: 15px; border: 1px solid #ccc; padding: 10px;\">\n\t\t<h3>Analysis (Derived via $derived.by)</h3>\n\t\t<p data-testid=\"word-count\">Words: {analysis.wordCount}</p>\n\t\t<p data-testid=\"char-count\">Characters: {analysis.charCount}</p>\n\t\t<p data-testid=\"length-indicator\">Status: {analysis.lengthStatus}</p>\n\t</div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/google/derived-by_sample4_eb78faa608c1b880/Component.svelte:40:2 '$bind:value' is not a valid attribute name\nhttps://svelte.dev/e/attribute_invalid_name"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    // Helper function used by $derived.by to perform complex analysis\n    function analyzeText(t) {\n        // Character count\n        const charCount = t.length;\n\n        // Word count: split by whitespace, handle empty input robustly\n        const words = t.trim() === '' ? [] : t.trim().split(/\\s+/).filter(word => word.length > 0);\n        const wordCount = words.length;\n\n        // Length status check\n        const isLong = wordCount > 15;\n\n        return {\n            wordCount,\n            charCount,\n            isLong\n        };\n    }\n\n    // Use $derived.by to extract multiple derived properties efficiently from the analysis function\n    const { wordCount, charCount, isLong } = $derived.by(() => analyzeText(text));\n\n    function clearText() {\n        text = '';\n    }\n</script>\n\n<div>\n    <input\n        data-testid=\"text-input\"\n        type=\"text\"\n        bind:value={text}\n        style=\"width: 400px; padding: 8px; border: 1px solid #ccc;\"\n        placeholder=\"Start typing here...\"\n    />\n    <button data-testid=\"clear-button\" onclick={clearText} style=\"margin-left: 10px; padding: 8px;\">Clear</button>\n\n    <div style=\"margin-top: 20px; padding: 10px; border: 1px dashed #eee;\">\n        <h3>Text Analysis (Derived)</h3>\n        <p data-testid=\"word-count\">Words: <strong>{wordCount}</strong></p>\n        <p data-testid=\"char-count\">Characters: <strong>{charCount}</strong></p>\n        <p data-testid=\"length-indicator\">\n            Status: \n            <strong style=\"color: {isLong ? 'red' : 'green'};\">\n                {isLong ? 'Long text (over 15 words)' : 'Short text'}\n            </strong>\n        </p>\n    </div>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    const analyzeText = () => {\n        const charCount = text.length;\n\n        // Simple word count: split by whitespace and filter out empty strings\n        const words = text.trim().split(/\\s+/).filter(w => w.length > 0);\n        const wordCount = words.length;\n\n        // Requirement: \"long\" means more than 15 words\n        const isLong = wordCount > 15;\n\n        return {\n            wordCount,\n            charCount,\n            isLong\n        };\n    };\n\n    const analysis = $derived.by(analyzeText);\n\n    const clearText = () => {\n        text = '';\n    };\n</script>\n\n<div>\n    <h1>$derived.by Text Analyzer</h1>\n    <input\n        data-testid=\"text-input\"\n        type=\"text\"\n        bind:value={text}\n        placeholder=\"Start typing...\"\n        style=\"width: 300px; padding: 5px;\"\n    />\n    <button data-testid=\"clear-button\" onclick={clearText} style=\"margin-left: 10px;\">Clear</button>\n\n    <div style=\"margin-top: 20px; border: 1px solid #ccc; padding: 10px;\">\n        <h2>Analysis</h2>\n        <p data-testid=\"word-count\">Words: {analysis.wordCount}</p>\n        <p data-testid=\"char-count\">Characters: {analysis.charCount}</p>\n        <p data-testid=\"length-indicator\">\n            Status: {analysis.isLong ? 'Long text (15+ words)' : 'Short text'}\n        </p>\n    </div>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    const analysis = $derived.by(() => {\n        // Character count is simple\n        const charCount = text.length;\n\n        // Word count: split by any whitespace, filtering out empty strings caused by multiple spaces\n        const words = text.trim().split(/\\s+/).filter(w => w.length > 0);\n        const wordCount = words.length;\n\n        // \"Long\" status requirement\n        const isLong = wordCount > 15;\n\n        return {\n            wordCount,\n            charCount,\n            isLong\n        };\n    });\n\n    const clearText = () => {\n        text = '';\n    };\n</script>\n\n<div>\n    <input\n        data-testid=\"text-input\"\n        type=\"text\"\n        bind:value={text}\n        placeholder=\"Enter text here...\"\n        style=\"width: 300px; padding: 5px;\"\n    />\n    <button data-testid=\"clear-button\" onclick={clearText}>Clear</button>\n    \n    <div>\n        <p data-testid=\"word-count\">Words: {analysis.wordCount}</p>\n        <p data-testid=\"char-count\">Characters: {analysis.charCount}</p>\n        <p data-testid=\"length-indicator\">Status: {analysis.isLong ? 'Long text' : 'Short text'}</p>\n    </div>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const clearText = () => {\n    text = '';\n  };\n\n  const metrics = $derived.by(() => {\n    const charCount = text.length;\n\n    // Calculate word count: trim, split by one or more whitespace characters, and filter out empty strings\n    const words = text.trim().split(/\\s+/).filter(w => w.length > 0);\n    const wordCount = words.length;\n\n    const isLong = wordCount > 15;\n\n    return {\n      wordCount,\n      charCount,\n      isLong\n    };\n  });\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    $bind:value={text}\n    placeholder=\"Start typing here...\"\n    style=\"width: 300px; padding: 5px;\"\n  />\n  <button data-testid=\"clear-button\" onclick={clearText} style=\"margin-left: 10px;\">Clear</button>\n\n  <div style=\"margin-top: 15px;\">\n    <p data-testid=\"word-count\">Words: {metrics.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {metrics.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {metrics.isLong ? 'Long text (Over 15 words)' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/google/derived-by_sample8_919cbf6433240e3c/Component.svelte:31:4 '$bind:value' is not a valid attribute name\nhttps://svelte.dev/e/attribute_invalid_name"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('');\n\n    // Define the complex analysis function\n    const analyzeText = (currentText) => {\n        // 1. Character count\n        const charCount = currentText.length;\n\n        // 2. Word count\n        // Split by whitespace and filter out empty strings to handle multiple spaces\n        const words = currentText.trim().split(/\\s+/).filter(word => word.length > 0);\n        const wordCount = words.length;\n\n        // 3. Length status\n        const isLong = wordCount > 15;\n        const lengthStatus = isLong ? 'Long text' : 'Short text';\n\n        return {\n            wordCount,\n            charCount,\n            lengthStatus\n        };\n    };\n\n    // Use $derived.by to run the analysis function whenever text changes\n    const analysis = $derived.by(() => analyzeText(text));\n\n    const clearText = () => {\n        text = '';\n    };\n</script>\n\n<div>\n    <input\n        data-testid=\"text-input\"\n        type=\"text\"\n        bind:value={text}\n        placeholder=\"Start typing...\"\n        style=\"width: 80%; padding: 8px; margin-right: 10px;\"\n    />\n    \n    <button data-testid=\"clear-button\" onclick={clearText} style=\"padding: 8px;\">\n        Clear\n    </button>\n    \n    <div style=\"margin-top: 15px; border: 1px solid #ccc; padding: 10px;\">\n        <h3>Text Analysis</h3>\n        <p data-testid=\"word-count\">Words: {analysis.wordCount}</p>\n        <p data-testid=\"char-count\">Characters: {analysis.charCount}</p>\n        <p data-testid=\"length-indicator\">Status: {analysis.lengthStatus}</p>\n    </div>\n</div>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "each",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 3,
    "pass1": 0.30000000000000004,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  const addGeorge = () => {\n    // Direct mutation works with Svelte 5 runes\n    characters.push(\"George\");\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n    import { $state } from 'svelte/state';\n\n    let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n    const addGeorge = () => {\n        characters = [...characters, \"George\"];\n    };\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/each_sample1_9e0560971585be68/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte/state';\n\n  const characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    // Svelte 5 $state allows direct mutation of arrays and objects\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/each_sample2_25ba77cada138bde/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte/state';\n\n  // 1. Hardcoded array of 3 characters\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  // 3. Function to add 'George'\n  const addGeorge = () => {\n    // Add 'George' to the reactive array\n    // Svelte 5 detects array mutation via $state\n    if (!characters.includes(\"George\")) {\n      characters.push(\"George\");\n    }\n  };\n</script>\n\n<div>\n  <!-- 2. Use {#each} block to render list -->\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n\n  <!-- 3. Button to add George -->\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/each_sample3_9e9093b066c1e23b/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n$state.url = import.meta.url;\n\nlet characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\nconst addGeorge = () => {\n  characters = [...characters, \"George\"];\n};\n\n$effect(() => {\n  // Console log to satisfy any linter expectations if the variable isn't used elsewhere\n  // In a real Svelte component, this might be omitted, but keeping it as a place marker\n  // for typical Svelte 5 structure.\n});\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/each_sample4_8869926f2f63ae94/Component.svelte:8:40 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte/state';\n\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  const addGeorge = () => {\n    // Note: Mutating the array directly works fine with Svelte 5 runes\n    characters.push(\"George\");\n    // Ensure reactivity by forcing an update if George hasn't been added yet\n    // Since we only need to add him once per click, and state updates automatically, \n    // a simple push is sufficient. To handle the case where \"George\" might already exist \n    // and we want to prevent duplicates, we'd check first, but the requirement is just to add him.\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/each_sample5_dc30471478194a50/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n    import { $state } from 'svelte/state';\n\n    let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n    function addGeorge() {\n        characters = [...characters, \"George\"];\n    }\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/each_sample6_4dd39bf350eeda0b/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n    import { $state } from 'svelte/state';\n\n    let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n    const addGeorge = () => {\n        // Svelte 5 mutation handling\n        characters.push(\"George\");\n    };\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/each_sample7_84e1dd1fc508c1a9/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  const addGeorge = () => {\n    // Check if George is already present to avoid duplicates, although the requirement is just to add him.\n    if (!characters.includes(\"George\")) {\n      characters = [...characters, \"George\"];\n    }\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n\n  <button data-testid=\"add-george-button\" onclick={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let characters = $state([\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n    const addGeorge = () => {\n        // We ensure George is only added once for simplicity, although the prompt implies just adding him upon click.\n        if (!characters.includes(\"George\")) {\n            characters.push(\"George\");\n        } else {\n             // Allow multiple Georges if clicked again, sticking closer to the basic requirement of adding on click.\n             characters.push(\"George\");\n        }\n    };\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character, index (index)}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" onclick={addGeorge}>Add George</button>\n</div>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "effect",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 7,
    "pass1": 0.7,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\n\tconst increment = () => {\n\t\tnumber += 1;\n\t};\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n$:$:\n$let number = $state(5);\n$let doubled = $state(0);\n\n$effect(() => {\n  doubled = number * 2;\n});\n\nfunction increment() {\n  number++;\n}\n$:$\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/effect_sample1_50ff1cb477d7bacb/Component.svelte:8:22 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\n\tfunction increment() {\n\t\tnumber += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let number = $state(5);\n    let doubled = $state(0);\n\n    // $effect runs whenever 'number' changes and sets the new value of 'doubled'\n    $effect(() => {\n        doubled = number * 2;\n    });\n\n    const increment = () => {\n        number += 1;\n    };\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {number}</p>\n    <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n    <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\n\tfunction increment() {\n\t\tnumber += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\n\tfunction increment() {\n\t\tnumber += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\n\tfunction increment() {\n\t\tnumber += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n$query = $state(5);\n$doubled = $state(0);\n\n$effect(() => {\n\t$doubled = $query * 2;\n});\n\nfunction increment() {\n\t$query++;\n}\n<p data-testid=\"number-value\">Number: {$query}</p>\n<p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n<button data-testid=\"increment-button\" on:click={increment}>Increment</button>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/effect_sample7_d41280031d306c91/Component.svelte:7:22 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n$runes\n$state\n$effect\n\nlet number = $state(5);\nlet doubled = $state(0);\n\n$effect(() => {\n\tdoubled = number * 2;\n});\n\nfunction increment() {\n\tnumber++;\n}\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/effect_sample8_b6256fa00d0c30d4/Component.svelte:11:21 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet number = $state(5);\n\tlet doubled = $state(0);\n\n\t$effect(() => {\n\t\tdoubled = number * 2;\n\t});\n\n\tfunction increment() {\n\t\tnumber += 1;\n\t}\n</script>\n\n<div>\n\t<p data-testid=\"number-value\">Number: {number}</p>\n\t<p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "hello-world",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t\tfont-size: 2em;\n\t}\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 10px;\n        padding: 5px; \n    }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t// No script needed for static content\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t\tpadding: 10px;\n\t\tfont-size: 2em;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 10px;\n        padding: 5px; \n        font-family: sans-serif;\n    }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 20px;\n        padding: 10px;\n        font-size: 2em;\n    }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t\tfont-size: 2em;\n\t\tfont-family: sans-serif;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t// No script needed for this static component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 10px;\n\t}\n</style>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "inspect",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('Hello world');\n\n    // 2. Basic $inspect: Logs the value whenever it changes\n    $inspect(text);\n\n    // 3. $inspect(...).with: Tracks updates with a custom callback\n    const handleTextUpdate = (newValue) => {\n        console.log([INSPECT.WITH] Text updated to: \"${newValue}\");\n    };\n    $inspect(text).with(handleTextUpdate);\n\n    // 4. $inspect.trace() inside an $effect\n    $effect(() => {\n        // Logs the call stack showing why this effect ran (due to 'text' change)\n        $inspect.trace();\n        console.log([EFFECT] Text changed. Current length: ${text.length});\n    });\n</script>\n\n<div>\n    <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n    <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n    <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample0_a786a5fac80f8702/Component.svelte:11:35 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // 1. Basic $inspect: Logs the value of 'text' whenever it changes\n  $inspect(text);\n\n  // 2. $inspect(...).with: Tracks updates using a custom callback\n  function logUpdate(newValue, oldValue) {\n    console.log([Custom Inspector] Text updated from \"${oldValue}\" to \"${newValue}\");\n  }\n  $inspect(text).with(logUpdate);\n\n  // 3. $inspect.trace() inside an effect\n  $effect(() => {\n    // When 'text' changes, this trace outputs the call stack that triggered the update\n    $inspect.trace();\n    console.log(Effect ran. Current value: ${text});\n  });\n</script>\n\n<div>\n  <!-- 6. Input field -->\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n\n  <!-- 7. Display input value -->\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n\n  <!-- 8. Display character count (derived value demonstration) -->\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample1_79b348884cca7e87/Component.svelte:11:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // 1. Basic $inspect logging\n  // Logs the initial value and every update to 'text'\n  $inspect(text);\n\n  // 2. $inspect with custom callback (.with)\n  // Provides custom logging logic whenever 'text' updates\n  $inspect(text).with((value) => {\n    console.log([Custom .with Callback] Text updated to: \"${value}\");\n  });\n\n  // 3. $inspect.trace() inside an effect\n  // This effect runs whenever 'text' changes. trace() shows the reactive dependency path.\n  $effect(() => {\n    console.log([Effect Run] Current text length: ${text.length});\n    // Traces the dependency graph that caused this effect to rerun\n    $inspect.trace();\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  \n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  \n  <!-- Derived value demonstration -->\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample2_78f9c0348bf741f1/Component.svelte:13:30 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state(\"Hello world\");\n\n    $inspect(text);\n\n    const handleUpdate = (newValue) => {\n        console.log([Custom Inspector Handler] 'text' updated to: \"${newValue}\");\n    };\n\n    $inspect(text).with(handleUpdate);\n\n    $effect(() => {\n        console.log([Effect running] Current text length: ${text.length});\n        $inspect.trace();\n    });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  \n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample3_975b51536b1b3e60/Component.svelte:9:28 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('Hello world');\n\n    // 1. Basic inspect: Logs state changes to the console under 'text'\n    $inspect(text);\n\n    // 2. Custom inspection callback\n    $inspect(text).with((newValue) => {\n        console.log([Custom Watcher] Text updated: \"${newValue}\");\n    });\n\n    // 3. Effect with trace: Runs and traces its execution whenever 'text' changes\n    $effect(() => {\n        // Accessing 'text' causes this effect to re-run when 'text' updates.\n        $inspect.trace('Tracing Text Change Effect');\n    });\n</script>\n\n<div>\n    <input \n        data-testid=\"text-input\" \n        type=\"text\" \n        bind:value={text} \n    />\n    \n    <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n    \n    <!-- 4. Display character count (derived value) -->\n    <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample4_54dbc0d0ebb1dc72/Component.svelte:11:28 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  const customLogger = (newValue, oldValue) => {\n    console.log('--- Custom Update Trace (using .with) ---');\n    console.log(Old value: \"${oldValue}\");\n    console.log(New value: \"${newValue}\");\n    console.log('-----------------------------------------');\n  };\n\n  // 3. Implement $inspect(...).with\n  $inspect(text).with(customLogger);\n\n  // 4. Implement $inspect.trace() inside an effect\n  $effect(() => {\n    $inspect.trace('text change effect trigger');\n    console.log(Effect triggered. Current length: ${text.length});\n  });\n\n  // 2. Basic $inspect (implicitly available via devtools, but explicit declaration helps)\n  // $inspect(text);\n</script>\n\n<div>\n  <!-- 6. Input field -->\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  \n  <!-- 7. Display the input value -->\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  \n  <!-- 5. and 8. Display the character count -->\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample5_0d088e747dfc9819/Component.svelte:8:20 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet text = $state(\"Hello world\");\n\n\t// 1. Basic $inspect: Logs the value of text whenever it changes.\n\t$inspect(text);\n\n\t// 2. $inspect(...).with: Tracks updates with a custom callback function.\n\t$inspect(text).with((oldValue, newValue) => {\n\t\tconsole.log([Custom Inspector] Text updated. Old: \"${oldValue}\", New: \"${newValue}\");\n\t});\n\n\t// 3. $inspect.trace() inside an effect: Logs the call stack whenever the effect re-runs (i.e., when 'text' changes).\n\t$effect(() => {\n\t\t$inspect.trace();\n\t\tconsole.log([Effect Run] Tracing updates based on text dependency.);\n\t});\n</script>\n\n<div>\n\t<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n\t<p data-testid=\"text-value\">Current text: \"{text}\"</p>\n\t<p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample6_e46200093acdd311/Component.svelte:11:22 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let text = $state('Hello world');\n\n    // 2. Basic $inspect: Logs the value of 'text' whenever it changes.\n    $inspect(text);\n\n    // 3. $inspect.with: Tracks updates with a custom logging callback.\n    $inspect(text).with((current, previous) => {\n        console.log([INSPECT.WITH] Text updated. Previous: \"${previous}\" | Current: \"${current}\");\n    });\n\n    // 4. $inspect.trace(): Traces the dependency graph when the effect runs.\n    $effect(() => {\n        // Accessing 'text' here makes the effect dependent on it.\n        console.log([EFFECT] Running because text changed. Current length: ${text.length});\n        $inspect.trace('Tracing Text Dependency Update');\n    });\n</script>\n\n<div>\n    <h2>$inspect Rune Demo</h2>\n\n    <!-- 6. Input field -->\n    <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n    \n    <!-- 7. Display the input value -->\n    <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n    \n    <!-- 5, 8. Display the character count (derived value) -->\n    <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample7_330521e2218dcc5e/Component.svelte:11:35 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // 2. Use basic $inspect to log the input value on every change\n  $inspect(text);\n\n  // 3. Implement $inspect(...).with to track updates with a custom callback\n  $inspect(text).with((currentValue) => {\n    console.log('--- Custom $inspect hook ---');\n    console.log(Text updated via .with: \"${currentValue}\");\n    console.log('----------------------------');\n  });\n\n  // 4. Implement $inspect.trace() inside an effect\n  $effect(() => {\n    // This traces the reactive dependencies that caused this effect to run.\n    $inspect.trace('Text change effect trace');\n    // We access text here to ensure the dependency is established\n    console.log(Effect runs: Text length is ${text.length});\n  });\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n  />\n  \n  <!-- 7. Display the input value -->\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  \n  <!-- 8. Display the character count (5. derived value) -->\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample8_0801ce0607bce1b3/Component.svelte:12:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('Hello world');\n\n  // 1. Basic $inspect\n  $inspect(text);\n\n  // 2. $inspect with custom callback\n  $inspect(text).with((newValue, oldValue) => {\n    console.log([Custom Inspect .with]: Value changed from \"${oldValue}\" to \"${newValue}\");\n  });\n\n  // 3. $inspect.trace() inside an $effect\n  $effect(() => {\n    // Log the dependency trace whenever the effect runs (i.e., when 'text' changes)\n    $inspect.trace();\n    // Optional: Confirm effect ran\n    console.log([Effect Ran]: Current text state is observed.);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  \n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  \n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/inspect_sample9_cac7d52dcb3f986a/Component.svelte:11:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "props",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 9,
    "pass1": 0.9,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { name = \"World\", count: initialCount = 0, showDetails = false } = $props();\n\n  let count = $state(initialCount);\n\n  const increment = () => {\n    count++;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const { \n    name = \"World\", \n    count = 0, \n    showDetails = false \n  } = $props();\n\n  let internalCount = $state(count);\n\n  const increment = () => {\n    internalCount++;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  \n  <p data-testid=\"count-display\">Count: {internalCount}</p>\n  \n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n  \n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {internalCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const {\n    name = \"World\",\n    count = 0,\n    showDetails = false\n  } = $props();\n\n  // Use $state to hold the mutable count, initialized from the prop\n  let currentCount = $state(count);\n\n  const increment = () => {\n    currentCount += 1;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  \n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  \n  <button \n    data-testid=\"increment-button\"\n    onclick={increment}\n  >\n    Increment\n  </button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <!-- Note: We display the initial prop values here -->\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // 1. Use $props() to define component properties with default values\n  const { \n    name = 'World', \n    count = 0, \n    showDetails = false \n  } = $props();\n\n  // 2. Use $state to create a reactive, updatable count variable initialized from the prop\n  let currentCount = $state(count);\n\n  // 3. Function to increment the count\n  const increment = () => {\n    currentCount += 1;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n\n  <button data-testid=\"increment-button\" onclick={increment}>\n    Increment\n  </button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tlet { name = \"World\", count = 0, showDetails = false } = $props();\n\n\tlet currentCount = $state(count);\n\n\tfunction increment() {\n\t\tcurrentCount++;\n\t}\n</script>\n\n<div>\n\t<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\t<p data-testid=\"count-display\">Count: {currentCount}</p>\n\t<button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n\t{#if showDetails}\n\t\t<div data-testid=\"details\">\n\t\t\t<h2>Prop Details</h2>\n\t\t\t<p>Name is {name}</p>\n\t\t\t<p>Count is {count} (Initial value)</p>\n\t\t\t<p>Current Reactive Count is {currentCount}</p>\n\t\t\t<p>ShowDetails is {showDetails}</p>\n\t\t</div>\n\t{/if}\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n    const { \n        name = \"World\", \n        count = 0, \n        showDetails = false \n    } = $props();\n\n    // Create a reactive state initialized from the prop 'count'\n    let currentCount = $state(count);\n\n    const increment = () => {\n        currentCount += 1;\n    };\n</script>\n\n<div>\n    <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n    \n    <p data-testid=\"count-display\">Count: {currentCount}</p>\n    \n    <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n    {#if showDetails}\n        <div data-testid=\"details\">\n            <p>Name is {name}</p>\n            <p>Count is {currentCount}</p>\n            <p>ShowDetails is {showDetails}</p>\n        </div>\n    {/if}\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // 1. Use $props to accept properties with defaults\n  const { name = \"World\", count = 0, showDetails = false } = $props();\n\n  // 2. Use $state for the internal, updatable count\n  let currentCount = $state(count);\n\n  // 5. Increment function\n  const increment = () => {\n    currentCount += 1;\n  };\n</script>\n\n<div>\n  <!-- 3. Display name -->\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n\n  <!-- 4. Display count -->\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n\n  <!-- 5. Increment button -->\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  <!-- 6. Conditionally display details -->\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <h2>Prop Details:</h2>\n      <p>Name is {name}</p>\n      <p>Count is {count} (initial prop value)</p>\n      <p>Current internal count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const {\n    name = \"World\",\n    count: initialCount = 0,\n    showDetails = false\n  } = $props();\n\n  let currentCount = $state(initialCount);\n\n  const increment = () => {\n    currentCount += 1;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  \n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  \n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n    const props = $props({\n        name: 'World',\n        count: 0,\n        showDetails: false\n    });\n\n    // Initialize internal state with the starting prop count\n    let currentCount = $state(props.count);\n\n    const increment = () => {\n        currentCount += 1;\n    };\n</script>\n\n<div>\n    <h1 data-testid=\"name-display\">Hello, {props.name}!</h1>\n    \n    <p data-testid=\"count-display\">Count: {currentCount}</p>\n    \n    <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n    {#if props.showDetails}\n        <div data-testid=\"details\">\n            <p>Name is {props.name}</p>\n            <p>Count is {currentCount}</p>\n            <p>ShowDetails is {props.showDetails}</p>\n        </div>\n    {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/google/props_sample8_3271d18fc2d829ef/Component.svelte:4:18 `$props` cannot be called with arguments\nhttps://svelte.dev/e/rune_invalid_arguments"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  /**\n   * Defines properties using the $props() rune with default values.\n   */\n  const {\n    name = \"World\",\n    count = 0,\n    showDetails = false\n  } = $props();\n\n  /**\n   * Use $state to create a mutable, reactive version of the initial count prop.\n   */\n  let currentCount = $state(count);\n\n  const increment = () => {\n    currentCount += 1;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {currentCount}</p>\n  <button data-testid=\"increment-button\" onclick={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {currentCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  },
  {
    "testName": "snippets",
    "provider": "Google",
    "modelId": "gemini-2.5-flash-preview-09-2025",
    "numSamples": 10,
    "numCorrect": 3,
    "pass1": 0.30000000000000004,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n{#snippet title(bookTitle)}\n\t<span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\tconst title = $snippet((bookTitle) => {\n\t\treturn (\n\t\t\t<span data-testid=\"book-title\">{bookTitle}</span>\n\t\t);\n\t});\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/snippets_sample1_6b40c1c75d0e4dcf/Component.svelte:8:3 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\t// Define the snippet\n\tconst snippet title(bookTitle) {\n\t\treturn <span data-testid=\"book-title\">{bookTitle}</span>;\n\t}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/snippets_sample2_983ff4c67f0eb6e0/Component.svelte:7:15 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n{#snippet title(bookTitle)}\n\t<span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n</script>\n\n{#snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\t$snippet(title(bookTitle)) {\n\t\t<span data-testid=\"book-title\">{bookTitle}</span>\n\t}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/snippets_sample5_c0bb5e4e89c3ced7/Component.svelte:6:28 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\t// Snippet definition\n\tconst title = snippet((bookTitle) => {\n\t\treturn <span data-testid=\"book-title\">{bookTitle}</span>;\n\t});\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/snippets_sample6_86173e7fd3c8db78/Component.svelte:8:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n</script>\n\n{@snippet title(bookTitle)}\n  <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/snippets_sample7_e7a6bc898166ba3f/Component.svelte:13:1 Unexpected block closing tag\nhttps://svelte.dev/e/block_unexpected_close"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n\t$snippet(bookTitle) {\n\t\t<span data-testid=\"book-title\">{bookTitle}</span>\n\t}\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render title(book)}\n\t\t</li>\n\t{/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/snippets_sample8_d3088849a8aa1aae/Component.svelte:6:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n    const books = [\n        \"The Lord of the Rings\",\n        \"To Kill a Mockingbird\",\n        \"1984\"\n    ];\n</script>\n\n{@snippet title(bookTitle)}\n    <span data-testid=\"book-title\">{bookTitle}</span>\n{/snippet}\n\n<ul>\n    {#each books as book}\n        <li data-testid=\"book-item\">\n            {@render title(book)}\n        </li>\n    {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/google/snippets_sample9_6e2615ec4f6b6c40/Component.svelte:13:1 Unexpected block closing tag\nhttps://svelte.dev/e/block_unexpected_close"
        ]
      }
    ],
    "timestamp": "2025-09-25T19:18:29.307Z"
  }
]