[
  {
    "testName": "counter",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 4,
    "pass1": 0.4,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte/$';\n  \n  let count = $state(0, { persist: true });\n</script>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 20px;\n  }\n\n  button {\n    margin: 0 10px;\n  }\n</style>\n\n<div class=\"counter\">\n  <button on:click={() => count -= 1} data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button on:click={() => count += 1} data-testid=\"increment-button\">+</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  const increment = () => {\n    count = count + 1;\n  };\n\n  const decrement = () => {\n    count = count - 1;\n  };\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    font-size: 24px;\n  }\n\n  button {\n    font-size: inherit;\n    margin: 0 10px;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    background: #f0f0f0;\n    cursor: pointer;\n  }\n\n  button:active {\n    background: #ccc;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte';\n\n  let count = $state(0);\n\n  const increment = () => {\n    count += 1;\n  };\n\n  const decrement = () => {\n    count -= 1;\n  };\n</script>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    font-size: 24px;\n  }\n</style>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function handleIncrement() {\n    count.set(count.value + 1);\n  }\n\n  function handleDecrement() {\n    count.set(count.value - 1);\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={handleDecrement}>-</button>\n  <span data-testid=\"count-value\">{count.value}</span>\n  <button data-testid=\"increment-button\" on:click={handleIncrement}>+</button>\n</div>\n\n<style>\n  .counter {\n    font-size: 1.2em;\n  }\n</style>",
        "success": false,
        "errors": [
          "Cannot convert object to primitive value"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Use Svelte 5's $state for reactivity\n  let count = $state(0);\n\n  function handleIncrement() {\n    count.set(count.get() + 1);\n  }\n\n  function handleDecrement() {\n    count.set(count.get() - 1);\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={handleDecrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={handleIncrement}>+</button>\n</div>",
        "success": false,
        "errors": [
          "Cannot convert object to primitive value"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  const increment = () => {\n    count += 1;\n  };\n\n  const decrement = () => {\n    count -= 1;\n  };\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    /* Add your custom styles here */\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = $state(0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    font-size: 24px;\n  }\n\n  button {\n    font-size: 24px;\n    margin: 4px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte';\n\n  let count = $state(0);\n\n  function increment() {\n    count.set(count.get() + 1);\n  }\n\n  function decrement() {\n    count.set(count.get() - 1);\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count.get()}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $count = 0;\n\n  function increment() {\n    $count++;\n  }\n\n  function decrement() {\n    $count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "derived",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte';\n\n  const number = $state(5);\n  const doubled = $derived(number, n => n * 2);\n\n  function increment() {\n    number.set(number.get() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte/internal';\n\n  let number = $state(5);\n  let doubled = $derived(number, $ => $ * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5;\n  const doubled = $derived(number, $ => $ * 2);\n\n  const increment = () => {\n    number += 1;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from '$$';\n  \n  let number = $state(5);\n  let doubled = $derived(() => number() * 2);\n  \n  const increment = () => number(number() + 1);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number, n => n * 2);\n\n  function increment() {\n    number.set(number.get() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:5:16 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived.doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state.number++}>Increment</button>\n</div>\n\n<script>\n  import { $$, $state, $derived } from 'svelte/5/rune'\n\n  let $state = {\n    number: 5\n  }\n\n  let $derived = $$({\n    doubled: () => $state.number * 2\n  })\n</script>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:12:6 Identifier '$state' has already been declared\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  const doubled = $derived([number], [$, num => num * 2]);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:5:38 `$` is an illegal variable name. To reference a global variable called `$`, use `globalThis.$`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect, $derived } from 'svelte/store/runes';\n\n  const number = $state(5);\n  const doubled = $derived(number, (n) => n * 2);\n\n  $effect(() => {\n    console.log('Number became:', number());\n  });\n\n  const increment = () => {\n    number.update(n => n + 1);\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button on:click={increment} data-testid=\"increment-button\">Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte/5/rune';\n\n  let number = $state(5);\n  let doubled = $derived(number, n => n * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number$ = $state(5);\n  const doubled$ = $derived(number$, num => num * 2);\n\n  $effect(() => {\n    console.log(Current number: ${number$()}, Doubled: ${doubled$()});\n  });\n\n  function increment() {\n    number$(number$() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number$()}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled$()}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:8:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "derived-by",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte';\n\n  const text = $state('');\n  const wordCount = $derived.by(text, (t) => t.split(/\\s+/).filter(Boolean).length);\n  const charCount = $derived.by(text, (t) => t.length);\n  const isLong = $derived.by(wordCount, (count) => count > 15);\n\n  const clearText = () => {\n    text.set('');\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n  import { Component } from 'svelte';\n\n  export let state: string = '';\n\n  let wordCount = $derived.by(() => {\n    return state.split(/\\s+/).filter(Boolean).length;\n  });\n\n  let charCount = $derived.by(() => state.length);\n\n  let isLongText = $derived.by(() => wordCount.value > 15);\n\n  function clearText() {\n    state = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={state} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLongText ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:6:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect, $derived } from 'svelte/rune';\n\n  let text = $state('');\n\n  const wordCount = $derived(by => $state(0));\n  const charCount = $derived(by => $state(0));\n  const isLong = $derived(by => $state(false));\n\n  $effect(() => {\n    const words = text.value.trim().split(/\\s+/);\n    let numWords = words.length;\n    let numChars = text.value.length;\n\n    by.set(wordCount, numWords);\n    by.set(charCount, numChars);\n    by.set(isLong, numWords > 15);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text.value} />\n  <button data-testid=\"clear-button\" on:click={() => text.set('')}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount.value}</p>\n    <p data-testid=\"char-count\">Characters: {charCount.value}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong.value ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Initialize the state to an empty string\n  let $text = '';\n\n  // Calculate the number of words\n  $numWords = $derived.by($text, () => {\n    return $text.split(' ').filter(Boolean).length;\n  });\n\n  // Calculate the number of characters\n  $numCharacters = $derived.by($text, () => {\n    return $text.length;\n  });\n\n  // Determine if the text is considered long\n  $isLong = $derived.by($numWords, () => {\n    return $numWords > 15;\n  });\n\n  // Clear text function\n  function clearText() {\n    $text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$numWords}</p>\n    <p data-testid=\"char-count\">Characters: {$numCharacters}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:5:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = \"\";\n\n  let $state: text;\n\n  let wordCount = $derived.by(\n    () => text,\n    (t) => t.split(/\\s+/).filter(Boolean).length\n  );\n  let charCount = $derived.by(() => text, (t) => t.length);\n  let isLongText = $derived.by(\n    () => wordCount,\n    (wc) => wc > 15 ? \"Long text\" : \"Short text\"\n  );\n\n  let clearText = () => {\n    text = \"\";\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLongText}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:12 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={$state.inputText}\n    on:input\n  />\n  <button data-testid=\"clear-button\" on:click (?,(lib: dataTestId=>) => {\n    $dataTestId.inputText = '';\n  }) >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">\n      Words: {$derived.by( $state.inputText.split(/\\s+/).length - 1 || 0 )\n    </p>\n    <p data-testid=\"char-count\">\n      Characters: {$derived.by( $state.inputText.length )\n    </p>\n    <p data-testid=\"length-indicator\">\n      Status: { $derived.by( (wordCount) => {\n        if (wordCount > 15) return 'Long text';\n        else return 'Short text';\n      }, $state.inputText.split(/\\s+/).length ) }\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:10:66 Expected attribute value\nhttps://svelte.dev/e/expected_attribute_value"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived, $effect } from 'svelte/hooks';\n\n  const text = $state('');\n  const wordCount = $derived.by(text, text => (text.trim() === '' ? 0 : text.split(/\\s+/).filter(Boolean).length));\n  const charCount = $derived.by(text, text => text.length);\n  const isLongText = $derived.by(wordCount, count => count > 15);\n\n  $effect(() => {\n    console.log(Text changed: ${text.current});\n  }, text);\n</script>\n\n<input \n  data-testid=\"text-input\"\n  type=\"text\"\n  bind:value={text}\n/>\n<button \n  data-testid=\"clear-button\"\n  on:click={() => text.set('')}\n>\n  Clear\n</button>\n\n<div>\n  <p data-testid=\"word-count\">Words: {wordCount}</p>\n  <p data-testid=\"char-count\">Characters: {charCount}</p>\n  <p data-testid=\"length-indicator\">Status: {isLongText ? 'Long text' : 'Short text'}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:12:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte/internal';\n\n  const text = $state('');\n\n  const wordCount = $derived(by(text), ($text) => {\n    return $text.split(/\\s+/).filter(Boolean).length;\n  });\n\n  const charCount = $derived(by(text), ($text) => {\n    return $text.length;\n  });\n\n  const isTextLong = $derived(by(wordCount), ($wordCount) => {\n    return $wordCount > 15 ? 'Long text' : 'Short text';\n  });\n\n  const clearText = () => {\n    $set(text, '');\n  };\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isTextLong}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" #input bind:value={$state.text} />\n  <button data-testid=\"clear-button\" on:click={() => $state.text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by($state.text, text => (text ? text.split(/\\s+/).length : 0)}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by($state.text, text => text.length)}</p>\n    <p data-testid=\"length-indicator\">Status: {$derived.by($state.text, text => text ? (text.split(/\\s+/).length > 15 ? 'Long text' : 'Short text') : 'No text')}&#160;\n</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:7:110 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derivedBy } from 'svelte/rune';\n\n  const text$ = state('');\n\n  const wordCount$ = derivedBy([text$], ($text) => {\n    const words = $text.trim().split(/\\s+/).filter(Boolean);\n    return words.length;\n  });\n\n  const charCount$ = derivedBy([text$], ($text) => $text.length);\n\n  const isTextLong$ = derivedBy([text$], ($text) => $text.trim().split(/\\s+/).filter(Boolean).length > 15);\n\n  function clearText() {\n    text$.set('');\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" bind:value={text$} type=\"text\" />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {@const [wordCount]} {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: @{const [charCount]} {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {@const [isTextLong]} {$isTextLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:26:58 Expected token =\nhttps://svelte.dev/e/expected_token"
        ]
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "each",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  $effect(() => {\n    console.log(characters);\n  });\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  const addCharacter = () => {\n    characters = [...characters, 'George'];\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addCharacter}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  const addGeorge = () => {\n    characters = [...characters, 'George'];\n  };\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  $on click button[data-testid='add-george-button'], ->\n    characters = [...characters, 'George']\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\">Add George</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  const addGeorge = () => {\n    characters = [...characters, 'George'];\n  };\n  $state(characters);\n\n  $effect(() => {\n    console.log(characters);\n  }, characters);\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:9:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button on:click={addGeorge} data-testid=\"add-george-button\">Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { createSignal } from 'solid-js';\n  import { last, insert } from 'solid-js/morphing';\n\n  const strategy = { key: (name) => name };\n  const [characters, setCharacters] = createSignal([\"Jerry\", \"Elaine\", \"Kramer\"]);\n  \n  function addGeorge() {\n    setCharacters(insert(characters(), strategy, last(characters()), \"George\"));\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters() as character (character)}\n      <li data-testid=\"character\">\n        {character}\n      </li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "Failed to resolve import \"solid-js\" from \"tmp/samples/openrouter/Component.svelte\". Does the file exist?"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "effect",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 1,
    "pass1": 0.09999999999999998,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'svelte';\n\n  let number = $state(5);\n  let doubled = $state(0);\n\n  $effect(() => {\n    doubled = number * 2;\n  }, number);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state number = 5;\n  let doubled;\n\n  $effect () => {\n    doubled = number * 2;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\"\n    on:click={() => number += 1}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const $state number = 5;\n  let $state doubled;\n  $effect doubled = number * 2;\n\n  const increment = () => number++;\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:15 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect } from 'svelte';\n\n  const number = $state(5);\n  let doubled;\n\n  $effect(() => {\n    doubled = number() * 2;\n  }, { run: true, key: number });\n\n  function increment() {\n    number.set(number() + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number()}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, effect } from '$common';\n  \n  const number = state(5);\n  let doubled = state(0);\n  \n  effect(() => {\n    doubled.set(number.get() * 2);\n  }, [number]);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number.get() + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to resolve import \"$common\" from \"tmp/samples/openrouter/Component.svelte\". Does the file exist?"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <$state int number = 5>\n  <$effect doubled = number * 2, number>\n\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number.get() + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:3 Expected a valid element or component name. Components must have a valid variable name or dot notation expression\nhttps://svelte.dev/e/tag_invalid_name"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$effect $state * 2}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state++}>Increment</button>\n</div>\n\n<script>\n  export let $state = 5;\n</script>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:5:51 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(10);\n\n  $effect(() => {\n    doubled = number * 2;\n  }, [number]);\n\n  function incrementNumber() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={incrementNumber}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:7:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $effect(() => number * 2);\n  function increment() {\n    number.update(value => value + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:5:16 `$effect()` can only be used as an expression statement\nhttps://svelte.dev/e/effect_invalid_placement"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $state(10);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "hello-world",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 9,
    "pass1": 0.9,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let greeting = \"Hello, World!\";\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">{greeting}</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n  let greeting = \"Hello, World!\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {greeting}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n    width: 100%;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n// HelloWorld.svelte\n<script></script>\n\n<style>\n  .greeting {\n    color: blue;\n    margin: 20px;\n    text-align: center;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n    // No state or effects needed for this simple component.\n</script>\n\n<style>\n    .greeting {\n        color: blue;\n        margin: 20px;\n        text-align: center;\n    }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\tgreeting {\n\t\tcolor: blue;\n\t\tmargin: 1rem;\n\t\ttext-align: center;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let greeting = \"Hello, World!\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {greeting}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem auto;\n    width: max-content;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n  export let name = 'World';\n</script>\n\n<div class:greeting>{Hello, ${name}!}</div>\n\n<style>\n  .greeting {\n    color: blue;\n    margin: 10px;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:7:29 Expected token }\nhttps://svelte.dev/e/expected_token\n\n- Did you forget to add a lang attribute to your style tag?\n- Did you forget to add a style preprocessor? See https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/preprocess.md for more information."
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Svelte 5 component named HelloWorld\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    margin: 1rem;\n    text-align: center;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // You can define reactive variables, but for this component, it's not needed.\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    margin: 1rem;\n    text-align: center;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let greetingText = \"Hello, World!\";\n</script>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 20px;\n    }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    {greetingText}\n</div>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "inspect",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $effect } from 'svelte';\n\n  let text = $state('Hello world');\n\n  $inspect(text).with((value) => {\n    console.log('Input value updated:', value);\n  });\n\n  $effect(() => {\n    $inspect.trace(() => {\n      console.log('Input value trace:', text);\n    });\n  }, text);\n\n  let charCount = $state(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $effect, $inspect } from 'svelte';\n\n  const text = $state('Hello world');\n\n  $effect(() => {\n    $inspect(text);\n    $inspect(text).with(value => console.log('Updated value:', value));\n    $inspect(text).trace();\n  });\n\n  $effect(() => {\n    console.log('Character count updated:', text.length);\n  });\n</script>\n\n<input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n<p data-testid=\"text-value\">Current text: \"{text}\"</p>\n<p data-testid=\"char-count\">Character count: {text.length}</p>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Using $state for a text input, initialized with \"Hello world\"\n  const text = $state(\"Hello world\");\n\n  // Using $inspect to log the input value\n  const inspectText = $inspect(text).with((value) => {\n    console.log(\"The current text is\", value);\n  });\n\n  // Implementing $inspect.trace() in an effect that runs when the input changes\n  $effect(() => {\n    console.log($inspect.trace(inspectText));\n  });\n\n  // The computed character count of the input text\n  const charCount = $state(inspectText.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={inspectText} />\n  <p data-testid=\"text-value\">Current text: \"{inspectText}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:14:16 `$inspect.trace(...)` must be the first statement of a function body\nhttps://svelte.dev/e/inspect_trace_invalid_placement"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $effect } from '$std/runes';\n\n  let text = $state(\"Hello world\");\n  \n  $inspect(text, \"Input value has changed\").with((val, prev) => {\n    console.log(Value updated from ${prev} to ${val});\n  });\n\n  $effect(() => {\n    $inspect.trace(text, \"Char count has changed\");\n    console.log(Character count is ${text.length});\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:9:22 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $effect } from 'svelte/rune';\n\n  let text = $state(\"Hello world\");\n  let characterCount = $state(text.value.length);\n\n  // Basic inspection\n  $inspect(text);\n\n  // Custom callback for inspecting\n  $inspect(text).with((newValue) => {\n    console.log('Text updated:', newValue);\n  });\n\n  // Trace inside an effect\n  $effect(() => {\n    $inspect(text).trace();\n  }, { run: true, update: false });\n\n  // Character count update on text change\n  $effect(() => {\n    characterCount.set(text.value.length);\n  }, text);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text.value} />\n  <p data-testid=\"text-value\">Current text: \"{text.value}\"</p>\n  <p data-testid=\"char-count\">Character count: {characterCount}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $inspect, $state, $effect } from 'svelte';\n\n  const text = $state(\"Hello world\");\n\n  $inspect(text).with((value) => console.log(Input value changed to: ${value}));\n  \n  $effect(() => {\n    console.log('Text input effect running:', text);\n\n    // If desired, additional logic or tracing can be performed here\n    return $inspect.trace();\n  }, text);\n\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:8:51 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, onMount, onCleanup, effect } from 'svelte/internal';\n\n  let text = $state('Hello world');\n  $inspect(text).with((value) => console.log('Input value:', value));\n  $inspect(text).trace();\n\n  let charCount = $state(text.length);\n\n  effect(() => {\n    charCount = text.length;\n  }, [$state(text)]);\n\n  onMount(() => {\n    console.log('Component mounted');\n  });\n\n  onCleanup(() => {\n    console.log('Component unmounted');\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Imports of `svelte/internal/*` are forbidden. It contains private runtime code which is subject to change without notice. If you're importing from `svelte/internal/*` to work around a limitation of Svelte, please open an issue at https://github.com/sveltejs/svelte and explain your use case\nhttps://svelte.dev/e/import_svelte_internal_forbidden"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<slot />\n<script>\n  import { state, inspect, effect } from \"svelte\";\n\n  const text = state(\"Hello world\");\n\n  inspect(text);\n  const textWithCallback = inspect(text).with((value) => {\n    console.log(\"Input updated to:\", value);\n  });\n\n  const charCount = effect(() => {\n    inspect(text).trace((updated) => {\n      console.log(\"Trace: input updated to:\", updated);\n    });\n    return text.length;\n  });\n\n  let displayText = text;\n  bind:displayText = textWithCallback;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={displayText} />\n  <p data-testid=\"text-value\">Current text: \"{displayText}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "(0 , state) is not a function\n\n\tin <unknown>\n",
          "(0 , state) is not a function\n\n\tin <unknown>\n",
          "(0 , state) is not a function\n\n\tin <unknown>\n",
          "(0 , state) is not a function\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $inspect, $state, $effect } from '$dataflow';\n\n  // Using $state to create a reactive variable\n  const text = $state('Hello world');\n\n  // Using $inspect to log changes in the input value\n  $inspect(text); \n\n  // Using $inspect with a custom callback to track updates\n  $inspect(text).with((value, change) => {\n    console.log('Input changed from', change.prev, 'to', value);\n  });\n\n  // $inspect.trace() inside an effect that runs when the input changes\n  $effect(() => {\n    console.log($inspect.text.trace());\n  }, [text]);\n\n  // Derived value demonstration: Character count\n  const charCount = $state(text.length);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>\nThis Svelte component implements the requirements as specified, using the Svelte 5 dataflow runes to create and observe reactive values, log changes, and perform side effects when the text input changes. The character count is derived from the text input and is displayed in the UI, demonstrating a simple dependency-based update.",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" use:$state=$props.text />\n  <p data-testid=\"text-value\">Current text: \"{$props.text}\"</p>\n  <p data-testid=\"char-count\">Character count: \"{$props.text.length}\"</p>\n</div>\n\n<script>\n  import { $state, $inspect } from 'svelte';\n\n  export let text = \"Hello world\";\n\n  $inspect(text);\n\n  $inspect(...text).with((newVal, oldVal) => {\n    console.log(Text updated from \"${oldVal}\" to \"${newVal}\");\n  });\n\n  $effect(() => {\n    $inspect.trace();\n  }, $props.text);\n</script>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:57 Directive value must be a JavaScript expression enclosed in curly braces\nhttps://svelte.dev/e/directive_invalid_value"
        ]
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "props",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let $props = {\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  };\n\n  let $state = {\n    count: $props.count\n  };\n\n  function incrementCount() {\n    $state.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  let $state = {\n    count: $props.count\n  };\n\n  const increment = () => {\n    $state.count += 1;\n  };\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {String($props.showDetails)}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n$component\n  PropsDemo {\n    $props\n      name: string = \"World\"\n      count: number = 0\n      showDetails: boolean = false\n    $state\n      count: number = $props.count\n\n    let increment = () => {\n      count += 1\n    }\n\n    $html\n      <div>\n        <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n        <p data-testid=\"count-display\">Count: {count}</p>\n        <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n        {#if $props.showDetails}\n          <div data-testid=\"details\">\n            <p>Name is {$props.name}</p>\n            <p>Count is {count}</p>\n            <p>ShowDetails is {$props.showDetails}</p>\n          </div>\n        {/if}\n      </div>\n  }\n</script>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:5:12 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div><script>\n  $props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  let countState = $props.count;\n\n  function incrementCount() {\n    countState += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {countState}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {countState}</p>\n      <p>ShowDetails is {$props.showDetails.toString()}</p>\n    </div>\n  {/if}\n</div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:18:40 `$props.name` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\nprops$ PropsDemo({\n  name: string = 'World',\n  count: number = 0,\n  showDetails: boolean = false\n});\n\nlet count$ = $props.count;\n\n$effect(() => {\n  count$ = $props.count;\n});\n\nfunction incrementCount() {\n  count$++;\n}\n\n<div>\n  <h1 data-testid=\"name-display\">{Hello, #{$props.name}!}</h1>\n  <p data-testid=\"count-display\">Count: {count$}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n  <div data-testid=\"details\">\n    <p>Name is #{$props.name}</p>\n    <p>Count is {count$}</p>\n    <p>ShowDetails is {#{$props.showDetails ? 'true' : 'false'}}</p>\n  </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:6 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $props, $state } from 'use';\n\n  // Define default props and use $props to accept them\n  let { name = \"World\", count = 0, showDetails = false } = $props;\n\n  // Reactive state for count\n  let $count = $state(count);\n\n  // Increment function\n  const increment = () => ($count += 1);\n</script>\n\n<h1 data-testid=\"name-display\">Hello, {$name}!</h1>\n<p data-testid=\"count-display\">Count: {$count}</p>\n<button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n{#if showDetails}\n  <div data-testid=\"details\">\n    <p>Name is {$name}</p>\n    <p>Count is {$count}</p>\n    <p>ShowDetails is {showDetails}</p>\n  </div>\n{/if}",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n    export let $props: {\n        name: string;\n        count: number;\n        showDetails: boolean;\n    } = {\n        name: \"World\",\n        count: 0,\n        showDetails: false,\n    };\n\n    $state count = $props.count;\n\n    function incrementCount() {\n        count += 1;\n    }\n</script>\n\n<h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n<p data-testid=\"count-display\">Count: {count}</p>\n<button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n{#if $props.showDetails}\n    <div data-testid=\"details\">\n        <p>Name is {$props.name}</p>\n        <p>Count is {count}</p>\n        <p>ShowDetails is {JSON.stringify($props.showDetails)}</p>\n    </div>\n{/if}",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:14:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Define PropsDemo component using $props to accept properties\n  export let $props = {\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  };\n\n  // Use $state to make count reactive\n  let $state count = $props.count;\n\n  // Function to increment count\n  let increment = () => $state count++;\n\n  // Update $state count whenever count prop changes\n  $effect(() => {\n    $state count = $props.count;\n  }, $props.count);\n  \n  // Update $props count whenever $state count changes\n  $effect(() => {\n    $props.count = $state count;\n  }, $state count);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state count}</p>\n      <p>ShowDetails is {$props.showDetails ? 'true' : 'false'}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:12:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let props = {\n    name: 'World',\n    count: 0,\n    showDetails: false\n  };\n\n  $state count = props.count;\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button on:click={increment} data-testid=\"increment-button\">Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:10:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n    module.exports = {\n        props: {\n            name: 'World',\n            count: 0,\n            showDetails: false\n        }\n    }\n</script>\n\n<h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n<p data-testid=\"count-display\">Count: {$props.count}</p>\n<button data-testid=\"increment-button\" on:click={() => $props.count += 1}>Increment</button>\n\n{if $props.showDetails}\n    <div data-testid=\"details\">\n        <p>Name is {$props.name}</p>\n        <p>Count is {$props.count}</p>\n        <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n{/if}",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:17:1 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  },
  {
    "testName": "snippets",
    "provider": "OpenRouter",
    "modelId": "opengvlab/internvl3-78b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  const title = (title) => <span data-testid=\"book-title\">{title}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:5:27 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n\tconst books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<ul>\n\t{#each books as book}\n\t\t<li data-testid=\"book-item\">\n\t\t\t{@render $snippets.title({ title: book })}\n\t\t</li>\n\t{/each}\n</ul>\n\n<snippets>\n\t<span data-testid=\"book-title\" as=\"title({ title })\">\n\t\t{title}\n\t</span>\n</snippets>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:10:12 `$snippets` is an illegal variable name. To reference a global variable called `$snippets`, use `globalThis.$snippets`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n    $snippetOn {\n        title: $text => <span data-testid=\"book-title\">{text}</span>\n    }\n</script>\n\n<ul>\n{#each books as book}\n    <li data-testid=\"book-item\">{@render @title(book)}</li>\n{/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:15 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n    const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n    const title = ($render, title) => $render(<span data-testid=\"book-title\">${title}</span>);\n\n    let bookItems = $map(books, book => (\n        <li data-testid=\"book-item\">\n            {$render(title, book)}\n        </li>\n    ));\n</script>\n\n<ul>\n    {$each(bookItems)}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:5:46 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n  import { html } from 'svelte/html.js';\n\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  const title = html<{ title: string }>\n    <span data-testid=\"book-title\">{$title}</span>\n  ;\n\n  export default html\n    <ul>\n      {books.map(book => (\n        <li data-testid=\"book-item\">\n          {@render title $title=book}\n        </li>\n      ))}\n    </ul>\n  ;\n</script>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:9:10 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const bookTitles = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  $snippet title(title) {\n    return (\n      <span data-testid=\"book-title\">\n        {title}\n      </span>\n    );\n  }\n</script>\n\n<ul>\n  {#each bookTitles as title}\n    <li data-testid=\"book-item\">\n      {@render $title(title)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = ['The Lord of the Rings', 'To Kill a Mockingbird', '1984'];\n</script>\n\n<ul>\n  {$each books as title}\n  <li data-testid=\"book-item\">\n    <span data-testid=\"book-title\">\n      {@render '@demo:book-title', { title }}\n    </span>\n  </li>\n  {$endeach}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:8:9 Expected token }\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n    const title = (title) => (\n        <span data-testid=\"book-title\">\n            {title}\n        </span>\n    );\n\n    const renderBookList = () => (\n        <ul>\n            {$each books, (book) => (\n                <li data-testid=\"book-item\">\n                    {@render title book}\n                </li>\n            )}\n        </ul>\n    );\n</script>\n\n{#await renderBookList()}\n<div> </div>\n{/await}",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:7:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n    runes { \n      snippet title(bookTitle: string) {\n        html<span data-testid=\"book-title\">${bookTitle}</span>\n      }\n    }\n</script>\n\n<ul>\n  {@render { \n    html : html<li data-testid=\"book-item\">${runes.title(book)}</li>,\n    from: books as book\n  }}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:10 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  snippet title(bookTitle) {\n    <span data-testid=\"book-title\">\n      {bookTitle}\n    </span>\n  }\n</script>\n\n<ul>\n  {@render [title(book) for (const book in books)}\n    <li data-testid=\"book-item\" slot={book}>\n      {book}\n    </li>\n  {/render}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-09-26T23:10:35.812Z"
  }
]