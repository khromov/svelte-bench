[
  {
    "testName": "counter",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 1,
    "pass1": 0.09999999999999998,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = 0;\n  function increment() {\n    count++;\n  }\n  function decrement() {\n    count--;\n  }\n</script>\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n</style>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  -1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  2\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte/reactive';\n  let count = $state(0);\n\n  function increment() {\n    count.set(count + 1);\n  }\n\n  function decrement() {\n    count.set(count - 1);\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/counter_sample1_cc910f89c2eceaab/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = 0;\n  \n  function increment() {\n    count++;\n  }\n\n  function decrement() {\n    count--;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  -1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  2\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n<script>\n  let count = 0;\n  function increment() {\n    count++;\n  }\n  function decrement() {\n    count--;\n  }\n</script>\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n</style>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  -1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  2\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<script>\n  let count = 0;\n  \n  function increment() {\n    count++;\n  }\n  \n  function decrement() {\n    count--;\n  }\n</script>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  -1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  2\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $: count = 0;\n  \n  function increment() {\n    count += 1;\n  }\n  \n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\">-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\">+</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/counter_sample5_5d6a6b96eeecc009/Component.svelte:4:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count -= 1}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count += 1}>+</button>\n</div>\n\n<script>\n  let count = 0;\n  $: {\n    count = 0;\n  }\n</script>\n\n<style>\n  .counter {\n    /* Add your CSS styling here */\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/counter_sample6_7e7a044d391b280e/Component.svelte:11:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { writable } from 'svelte/store';\n\n  const count = writable(0);\n\n  function increment() {\n    count.update(n => n + 1);\n  }\n\n  function decrement() {\n    count.update(n => n - 1);\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = 0;\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count = Math.max(0, count - 1)}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count = count + 1}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n</style>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  -1\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  2\u001b[39m\nReceived:\n\u001b[31m  0\u001b[39m"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$state';\n  \n  const count = state(0);\n  \n  function increment() {\n    count.update(prev => prev + 1);\n  }\n  \n  function decrement() {\n    count.update(prev => prev - 1);\n  }\n</script>\n\n<div class=\"counter\" data-testid=\"counter\">\n  <button class=\"button\" data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span class=\"count-value\" data-testid=\"count-value\">{count}</span>\n  <button class=\"button\" data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n  \n  .button {\n    padding: 8px 12px;\n    background-color: #f0f0f0;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .count-value {\n    font-size: 16px;\n    font-weight: bold;\n    min-width: 30px;\n    text-align: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to resolve import \"$state\" from \"tmp/samples/openrouter/counter_sample9_05fc3507a8ecd9d5/Component.svelte\". Does the file exist?"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "derived",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">{number}</p>\n  <p data-testid=\"doubled-value\">{doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>\n<script>\n  import { state, derived } from 'svelte/store';\n  \n  export let number = state(5);\n  const doubled = derived(number, $value => $value * 2);\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived_sample0_49f64bead1701e38/Component.svelte:11:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived(state => state.number * 2)}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state.number += 1}>Increment</button>\n</div>\n\n<script>\n  import { state } from 'svelte/runes';\n  \n  const state = state(5);\n  \n  $: doubled = state.number * 2;\n</script>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample1_f60f7729863d1b0c/Component.svelte:12:8 Identifier 'state' has already been declared\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/runes';\n  \n  const count = state(5);\n  const doubled = derived($count, value => value * 2);\n  \n  function increment() {\n    count.update(v => v + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {count}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": ["Missing \"./runes\" specifier in \"svelte\" package"]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = $state(5);\n  let doubled = $derived(number, n => n * 2);\n  \n  function increment() {\n    number.update(n => n + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">{number}</p>\n  <p data-testid=\"doubled-value\">{doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived_sample3_761232ad2f9b6aba/Component.svelte:5:16 `$derived` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/runes';\n  \n  const count = state(5);\n  const doubled = derived($count, value => value * 2);\n  \n  function increment() {\n    count.update(v => v + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {count}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": ["Missing \"./runes\" specifier in \"svelte\" package"]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/runes';\n  \n  const count = state(5);\n  const doubled = derived($count, value => value * 2);\n  \n  function increment() {\n    count.update(v => v + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$count}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": ["Missing \"./runes\" specifier in \"svelte\" package"]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = 5;\n  let doubled = number * 2;\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">{number}</p>\n  <p data-testid=\"doubled-value\">{doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Number: 5\u001b[39m\nReceived:\n\u001b[31m  5\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Number: 6\u001b[39m\nReceived:\n\u001b[31m  5\u001b[39m"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/runes';\n  \n  const count = state(5);\n  const doubled = derived(count, value => value * 2);\n  \n  function increment() {\n    count.update(v => v + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">{count}</p>\n  <p data-testid=\"doubled-value\">{doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": ["Missing \"./runes\" specifier in \"svelte\" package"]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/runes';\n  \n  const number = state(5);\n  const doubled = derived($number, value => value * 2);\n  \n  function increment() {\n    number.update(v => v + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": ["Missing \"./runes\" specifier in \"svelte\" package"]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/stores';\n  \n  $state number = 5;\n  $derived doubled = number * 2;\n  \n  function increment() {\n    $number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived_sample9_5005e94a16970304/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "derived-by",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n  \n  $: wordCount = $derived.by(text, t => t.trim().split(/\\s+/).filter(Boolean).length);\n  $: charCount = $derived.by(text, t => t.length);\n  $: isLong = $derived.by(text, t => t.split(/\\s+/).length > 15);\n  \n  function clearText() {\n    text = $state('');\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by(text, t => t.trim().split(/\\s+/).filter(Boolean).length)}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by(text, t => t.length)}</p>\n    <p data-testid=\"length-indicator\">Status: {$derived.by(text, t => t.split(/\\s+/).length > 15) ? 'Long' : 'Short'} text</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived-by_sample0_c2c8914e4d4eddbc/Component.svelte:6:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text}\n  />\n  <button data-testid=\"clear-button\" on:click={() => text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by(text, wordCount)}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by(text, charCount)}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.by(text, isLong ? 'Long text' : 'Short text')}\n    </p>\n  </div>\n</div>\n<script>\n  import { state, derived } from '$store';\n  \n  const text = state('');\n  const wordCount = derived(text, text => text.split(/\\s+/).length);\n  const charCount = derived(text, text => text.length);\n  const isLong = derived(wordCount, wordCount => wordCount > 15);\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived-by_sample1_a7f9d3aad4afd8f9/Component.svelte:7:4 Cannot bind to constant\nhttps://svelte.dev/e/constant_binding"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" let:text={$state} />\n  <button data-testid=\"clear-button\" on:click={() => text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by(() => text.trim().split(/\\s+/).length)}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by(() => text.length)}</p>\n    <p data-testid=\"length-indicator\">Status: {$derived.by(() => text.trim().split(/\\s+/).length > 15 ? 'Long text' : 'Short text')}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived-by_sample2_8c36261889562c66/Component.svelte:7:40 `$derived.by(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/store';\n\n  // State for text input\n  const text = state('');\n\n  // Derived values using derived.by\n  const wordCount = derived($text, () => {\n    if ($text.trim() === '') return 0;\n    return $text.split(/\\s+/).filter(word => word.length > 0).length;\n  });\n\n  const charCount = derived($text, () => $text.length);\n  const isLong = derived($text, () => wordCount > 15);\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={$text}\n  />\n  <button data-testid=\"clear-button\" on:click={() => text.set('')}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      {isLong ? 'Status: Long text' : 'Status: Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "(0 , state) is not a function\n\n\tin <unknown>\n",
          "(0 , state) is not a function\n\n\tin <unknown>\n",
          "(0 , state) is not a function\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.by.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived-by_sample4_fd416ed1ffdb2035/Component.svelte:4:58 Can only bind to state or props\nhttps://svelte.dev/e/bind_invalid_value"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text}\n  />\n  <button data-testid=\"clear-button\" on:click={() => text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      {isLong ? 'Status: Long text' : 'Status: Short text'}\n    </p>\n  </div>\n</div>\n\n<script>\n  import { state, derived } from 'svelte';\n\n  // Initialize state with empty string\n  const text = state('');\n  \n  // Derived properties using derived.by\n  const wordCount = derived(text, () => {\n    if (text === '') return 0;\n    return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  });\n\n  const charCount = derived(text, () => text.length);\n  \n  const isLong = derived(text, () => wordCount > 15);\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived-by_sample5_553a6f92b79b0633/Component.svelte:7:4 Cannot bind to constant\nhttps://svelte.dev/e/constant_binding"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from './store';\n  let text = '';\n  \n  $: wordCount = ($state).split(/\\s+/).filter(word => word.length > 0).length;\n  $: charCount = ($state).length;\n  $: isLong = ($state).length > 15;\n  \n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text}\n  />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.by.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived-by_sample6_75c5d6f6083a3a63/Component.svelte:7:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state: text = ''\n  const wordCount = $derived.by(text, text => text.split(/\\s+/).filter(Boolean).length)\n  const charCount = $derived.by(text, text => text.length)\n  const isLong = $derived.by(text, text => wordCount > 15)\n  function clearText() {\n    text = ''\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      {#if isLong}Long text{else}Short text{/if}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample7_96649539e2fe2eb0/Component.svelte:20:28 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={() => text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.by.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>\n<script>\n  import { state } from '$state';\n  import { derived } from '$derived';\n  \n  const text = state('');\n  \n  const $derived = {\n    by: {\n      wordCount: derived(text, () => {\n        return text.split(/\\s+/).filter(word => word.length > 0).length;\n      }),\n      charCount: derived(text, length => length.length),\n      isLong: derived(text, length => length > 15)\n    }\n  };\n</script>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/derived-by_sample8_00a737abfc2b4a44/Component.svelte:20:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$state';\n  import { derived } from '$derived';\n\n  $state.text = '';\n\n  const wordCount = derived(text => {\n    if (text.trim() === '') return 0;\n    return text.split(/\\s+/).filter(word => word.length > 0).length;\n  });\n\n  const charCount = derived(text => text.length);\n  const isLong = derived(text => wordCount > 15);\n\n  function clearText() {\n    $state.text = '';\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      {isLong ? 'Status: Long text' : 'Status: Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/derived-by_sample9_85993000d364bcd9/Component.svelte:23:58 Can only bind to state or props\nhttps://svelte.dev/e/bind_invalid_value"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "each",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  \n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  \n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  \n  function addCharacter() {\n    characters.push(\"George\");\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addCharacter}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters = [...characters, \"George\"]}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters.push(\"George\")}>Add George</button>\n</div>\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>",
        "success": false,
        "errors": ["expected 3 to be 4 // Object.is equality"]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "effect",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state {\n    number = 5;\n  }\n  $state doubled;\n  \n  $effect(() => {\n    $doubled = number * 2;\n  });\n  \n  function increment() {\n    $number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample0_9b79b317d025a1f0/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = 5;\n  $effect(() => {\n    doubled = count * 2;\n  });\n  function increment() {\n    count++;\n  }\n</script>\n<div>\n  <p data-testid=\"number-value\">Number: {count}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button on:click={increment} data-testid=\"increment-button\">Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample1_aeaba2f677444a8a/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = 5;\n  $state(number);\n  let doubled;\n  $effect(() => {\n    doubled = number * 2;\n  }, [number]);\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/effect_sample2_c16e8d01180d8887/Component.svelte:5:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = 5;\n  let doubled = 0;\n  $effect(() => {\n    doubled = number * 2;\n  });\n  function increment() {\n    number++;\n  }\n</script>\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled: 0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Number: 6\u001b[39m\nReceived:\n\u001b[31m  Number: 5\u001b[39m"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = 5;\n  $: doubled = number * 2;\n</script>\n\n<div>\n  <p data-testid=\"number-value\">{number}</p>\n  <p data-testid=\"doubled-value\">{doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/effect_sample4_4de9eea4da4ea83a/Component.svelte:5:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$app';\n  let number = state(5);\n  let doubled = state(0);\n\n  $effect(number, (value) => doubled = value * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">{number}</p>\n  <p data-testid=\"doubled-value\">{doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/effect_sample5_662358dfb541d56a/Component.svelte:8:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = 5;\n  let doubled = 0;\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number++;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled: 0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Number: 6\u001b[39m\nReceived:\n\u001b[31m  Number: 5\u001b[39m"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from 'svelte/store';\n  const number = state(5);\n  let doubled;\n  $effect(() => {\n    doubled = number.update(n => n * 2);\n  }, [number]);\n  function increment() {\n    number.update(n => n + 1);\n  }\n</script>\n<div>\n  <p data-testid=\"number-value\">{number}</p>\n  <p data-testid=\"doubled-value\">{doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/effect_sample7_58b2d3a02e215151/Component.svelte:7:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from 'svelte/store';\n  \n  $state number = 5;\n  $effect(() => number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">{number}</p>\n  <p data-testid=\"doubled-value\">{number * 2}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/effect_sample8_317941c4e91858e8/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let number = 5;\n  let doubled = 0;\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number++}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Doubled: 10\u001b[39m\nReceived:\n\u001b[31m  Doubled: 0\u001b[39m",
          "\u001b[2mexpect(\u001b[22m\u001b[31melement\u001b[39m\u001b[2m).toHaveTextContent()\u001b[22m\n\nExpected element to have text content:\n\u001b[32m  Number: 6\u001b[39m\nReceived:\n\u001b[31m  Number: 5\u001b[39m"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "hello-world",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 6,
    "pass1": 0.5999999999999999,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // The component logic - empty for this example\n</script>\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n<style>\n  .greeting {\n    color: blue;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script needed for static component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\" style=\"display: flex; justify-content: center; align-items: center; margin: 10px;\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No functionality needed for this base component\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n  }\n</style>\n\n<div class=\"greeting\" data-testid=\"greeting\">\n  Hello, World!\n</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<svelte:component>\n  <div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n  </div>\n</svelte:component>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/hello-world_sample5_38c051fc1e808faa/Component.svelte:3:0 `<svelte:component>` must have a 'this' attribute\nhttps://svelte.dev/e/svelte_component_missing_this"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<svelte:component>\n  <div data-testid=\"greeting\" class=\"greeting\" style=\"color: blue; text-align: center; margin: 20px;\">\n    Hello, World!\n  </div>\n</svelte:component>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/hello-world_sample6_7927b995a95619a7/Component.svelte:3:0 `<svelte:component>` must have a 'this' attribute\nhttps://svelte.dev/e/svelte_component_missing_this"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<svelte:fragment>\n  <div data-testid=\"greeting\" class=\"greeting\" style=\"color: blue; display: flex; justify-content: center; align-items: center; margin: 10px;\">Hello, World!</div>\n</svelte:fragment>\n<script>\n  // No script required for static content\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/hello-world_sample7_8f676b6505d8593a/Component.svelte:3:0 `<svelte:fragment>` must be the direct child of a component\nhttps://svelte.dev/e/svelte_fragment_invalid_placement"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // The component has no props or logic, so the script section is empty\n</script>\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n<style scoped>\n  .greeting {\n    color: blue;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<svelte:component>\n  <div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n  </div>\n  \n  <style>\n    .greeting {\n      color: blue;\n      text-align: center;\n      margin: 10px;\n    }\n  </style>\n</svelte:component>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/hello-world_sample9_e48864461d92778a/Component.svelte:3:0 `<svelte:component>` must have a 'this' attribute\nhttps://svelte.dev/e/svelte_component_missing_this"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "inspect",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let inputValue = $state('Hello world');\n  $inspect(inputValue);\n  $inspect(inputValue).with(({ value, type }) => {\n    if (type === 'update') {\n      console.log(Input updated: ${value});\n    }\n  });\n  $effect(() => {\n    $inspect.trace();\n  }, [inputValue]);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={inputValue} />\n  <p data-testid=\"text-value\">Current text: \"{inputValue}\"</p>\n  <p data-testid=\"char-count\">Character count: {inputValue.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample0_51576cb1953b8ad2/Component.svelte:8:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  $inspect(text);\n  $effect(() => {\n    $inspect(text).with(console.log);\n  }, []);\n  $effect(() => {\n    $inspect.trace()(text);\n  }, [text]);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample1_c17b49f66636dd30/Component.svelte:6:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = \"Hello world\";\n  $: $inspect(text);\n  $: $inspect(text).with(value => console.log('Value changed:', value));\n  $: $effect(() => {\n    $inspect.trace(text);\n  }, [text]);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample2_75e49ef5af7e0ab7/Component.svelte:5:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state {\n    let text = \"Hello world\";\n    $inspect(text).with(console.log);\n    $: charCount = text.length;\n  }\n  \n  $effect(() => {\n    $inspect(text).trace().with(console.log);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample3_ac83dc37a5462b46/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, effect, inspect } from 'svelte/runes';\n  \n  let text = state(\"Hello world\");\n  \n  $: inspect(text, {\n    name: 'text-input-value',\n    with: (value) => console.log('Inspected value:', value)\n  });\n  \n  $: effect(() => {\n    inspect.trace(text, {\n      name: 'char-count-trace',\n      maxLength: 10\n    });\n    return () => inspect.clear();\n  });\n  \n  $: charCount = text.length;\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text}\n  >\n  \n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  \n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample4_ac9b4216277665a9/Component.svelte:8:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let state = \"Hello world\";\n  \n  $: $inspect(state).with(value => console.log('State changed:', value))\n  \n  effect(() => {\n    $inspect.trace()();\n  }, [state]);\n</script>\n\n<input data-testid=\"text-input\" type=\"text\" bind:value={state} />\n<p data-testid=\"text-value\">Current text: \"{state}\"</p>\n<p data-testid=\"char-count\">Character count: {state.length}</p>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample5_c153d339767c4cd5/Component.svelte:6:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$state'\n  let inputStore = state('Hello world')\n  $: text = $inputStore\n  \n  $inspect(inputStore).with(console.log)\n  $inspect(inputStore).with(console.log)\n  \n  $effect(() => {\n    $inspect.trace(inputStore).with(console.log)\n  })\n</script>\n\n<input \n  data-testid=\"text-input\" \n  type=\"text\" \n  bind:value={text} \n/>\n<p data-testid=\"text-value\">Current text: \"{text}\"</p>\n<p data-testid=\"char-count\">Character count: {text.length}</p>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample6_22f05da30d0ae8d6/Component.svelte:6:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n</script>\n<input\n  data-testid=\"text-input\"\n  type=\"text\"\n  bind:value={text}\n/>\n<div data-testid=\"text-value\">\n  {$inspect(text)}\n  {$inspect(text).with(console.log)}\n  Current text: \"{text}\"\n</div>\n<div data-testid=\"char-count\">\n  Character count: {text.length}\n</div>\n<script>\n  $effect(() => {\n    $inspect.trace();\n  }, [text]);\n</script>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/inspect_sample7_22035810b065e68d/Component.svelte:19:0 A component can have a single top-level `<script>` element and/or a single top-level `<script module>` element\nhttps://svelte.dev/e/script_duplicate"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state(\"Hello world\");\n  $inspect(text).with(console.log);\n  effect(() => {\n    $inspect(text).trace();\n  }, [text]);\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "effect is not defined\n\n\tin <unknown>\n",
          "effect is not defined\n\n\tin <unknown>\n",
          "effect is not defined\n\n\tin <unknown>\n",
          "effect is not defined\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = \"Hello world\";\n  $inspect(text);\n  $inspect(text).with(value => console.log('Inspected value:', value));\n  $effect(() => {\n    $inspect.trace(text);\n  }, { deps: [text] });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/inspect_sample9_cafcb8ca67292743/Component.svelte:7:2 `$effect` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "props",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n  \n  let localCount = $state(count);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">{$props.name}</h1>\n  <p data-testid=\"count-display\">Count: {localCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => localCount++}>Increment</button>\n  \n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {localCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample0_28b871e15cf15b4a/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state count = $props.count;\n</script>\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}</h1>\n  <p data-testid=\"count-display\">Count: {$props.count}</p>\n  <button data-testid=\"increment-button\" on:click={() => count++}>Increment</button>\n  \n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$props.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample1_7972d11545638e9a/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { forEach } from 'svelte/store';\n  \n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n  \n  let details = {\n    name: name,\n    count: count,\n    showDetails: showDetails\n  };\n  \n  function incrementCount() {\n    count = count + 1;\n    details.count = count;\n    details.showDetails = showDetails;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n  \n  {#if details.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {details.name}</p>\n      <p>Count is {details.count}</p>\n      <p>ShowDetails is {details.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample2_bd1ee5923ccd4eb5/Component.svelte:6:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n  \n  $count = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$count}</p>\n  <button data-testid=\"increment-button\" on:click={$count++}>Increment</button>\n  \n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {$count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample3_349a4c07a124ec8c/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n</script>\n<div>\n  <h1 data-testid=\"name-display\">{name}</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={() => count++}>Increment</button>\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample4_e3c87ad24404ed08/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // Reactive state for count using $state rune\n  $state = $props.count || 0;\n  \n  // Handle increment operation\n  function handleIncrement() {\n    $state = $state + 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state}</p>\n  <button data-testid=\"increment-button\" on:click={handleIncrement}>Increment</button>\n  \n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample5_c45dda4a1f74e188/Component.svelte:5:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$state';\n  let countState = state($props.count);\n  \n  function increment() {\n    countState.set(countState.get() + 1);\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">{$props.name}</h1>\n  <p data-testid=\"count-display\">Count: {$state.get()}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.get()}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample6_cd9d7aaafbc4c745/Component.svelte:5:19 `$props.count` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$state';\n\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  const state = state(count);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">{name}</h1>\n  <p data-testid=\"count-display\">Count: {state.value}</p>\n  <button data-testid=\"increment-button\" on:click={() => state.set(state.value + 1)}>Increment</button>\n  \n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {state.value}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/props_sample7_22f1381f081ad07b/Component.svelte:10:8 Identifier 'state' has already been declared\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '#state';\n  \n  let count = state($props.count);\n  const increment = () => count(count + 1);\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">{$props.name}</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n  \n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample8_0abe34cede297ed7/Component.svelte:6:14 `$props.count` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n</script>\n<div>\n  <h1 data-testid=\"name-display\">{name}</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={() => count++}>Increment</button>\n  \n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/props_sample9_7dbb3f3133824d81/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  },
  {
    "testName": "snippets",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b-thinking",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n  \n  // Snippet component\n  const title = {\n    interpolate: (title) => <span data-testid=\"book-title\">{title}</span>\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{title(book)}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample0_162f87e38cfef404/Component.svelte:12:28 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  function title(text) {\n    return <span data-testid=\"book-title\">{text}</span>;\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title text={book}}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample1_de731a4c3be3aafa/Component.svelte:11:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n  \n  <svelte:snippet name=\"title\">\n    <span data-testid=\"book-title\">{title}</span>\n  </svelte:snippet>\n</script>\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title} {book}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample2_0824d9ad7d63d7fd/Component.svelte:10:2 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n  \n  const title = {\n    render: ({ prop }) => ({\n      type: 'span',\n      attributes: { 'data-testid': 'book-title' },\n      value: prop\n    })\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "title is not a function\n\n\tin <unknown>\n\tin Component.svelte\n",
          "title is not a function\n\n\tin <unknown>\n\tin Component.svelte\n",
          "title is not a function\n\n\tin <unknown>\n\tin Component.svelte\n"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n  \n  // Snippet component for displaying book titles\n  const title = {\n    assign: (title) => ({ data: title }),\n    render() {\n      return (\n        <span data-testid=\"book-title\">\n          {this.data}\n        </span>\n      );\n    }\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {title.render(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample4_54d58512e2ab1f48/Component.svelte:15:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n  \n  // Snippet definition for reusable title rendering\n  let titleSnippet = null;\n  \n  // Define snippet with parameter handling\n  {#define title(text)}\n    <span data-testid=\"book-title\">{{text}}</span>\n  {/define}\n</script>\n\n<ul>\n  {#each books as bookTitle}\n    <li data-testid=\"book-item\">\n      {@render title(bookTitle)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample5_cf79a737f72959b1/Component.svelte:14:3 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n  \n  snippet title(title) {\n    <span data-testid=\"book-title\">{title}</span>\n  }\n</script>\n\n<ul>\n  {#each books as bookTitle}\n    <li data-testid=\"book-item\">\n      {@render title} {bookTitle}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample6_fddaa2fc7aed9a97/Component.svelte:10:10 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n  \n  const title = {\n    render: ({ title: titleProp }) => <span data-testid=\"book-title\">{titleProp}</span>\n  };\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title title={book}}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample7_87b301c4b15def5b/Component.svelte:11:38 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<svelte:component>\n  <script>\n    const books = [\n      \"The Lord of the Rings\",\n      \"To Kill a Mockingbird\",\n      \"1984\"\n    ];\n    \n    const title = (text) => <span data-testid=\"book-title\">{text}</span>;\n  </script>\n  \n  <ul>\n    {books.map(book => \n      <li data-testid=\"book-item\">{@render title(book)}</li>\n    )}\n  </ul>\n</svelte:component>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample8_d1c10e1d4d862442/Component.svelte:3:0 `<svelte:component>` must have a 'this' attribute\nhttps://svelte.dev/e/svelte_component_missing_this"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  function title(text) {\n    return <span data-testid=\"book-title\">{text}</span>;\n  }\n</script>\n\n<ul>\n  {#each books as book (book)}\n    <li data-testid=\"book-item\">{@render title(book)}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/svelte-bench/tmp/samples/openrouter/snippets_sample9_fcd793ec72d9961e/Component.svelte:11:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-10-10T19:08:46.566Z"
  }
]
