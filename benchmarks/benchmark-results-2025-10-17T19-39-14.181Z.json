[
  {
    "testName": "counter",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(count, 0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => $state.count--}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={() => $state.count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    justify-content: center;\n    padding: 16px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n  \n  .counter button {\n    padding: 4px 8px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .counter button:hover {\n    background-color: #f0f0f0;\n  }\n</style>\n\n<script>\n  let initialState = {\n    count: 0\n  }\n  \n  $state = initialState\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:37:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button \n    data-testid=\"decrement-button\" \n    on:click={() => {\n      $state.value = $state.value - 1\n    }}\n  >\n    -\n  </button>\n  <span data-testid=\"count-value\">{$state.value}</span>\n  <button \n    data-testid=\"increment-button\" \n    on:click={() => {\n      $state.value = $state.value + 1\n    }}\n  >\n    +\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:7:6 `$state.value` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(count, 0);\n\n  function increment() {\n    count += 1;\n  }\n\n  function decrement() {\n    count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let $state = {\n        count: 0\n    }\n</script>\n\n<div class=\"counter\">\n    <button data-testid=\"decrement-button\" on:click={() => $state = { ...$state, count: $state.count - 1 }}>\n        -\n    </button>\n    <span data-testid=\"count-value\">\n        {$state.count}\n    </span>\n    <button data-testid=\"increment-button\" on:click={() => $state = { ...$state, count: $state.count + 1 }}>\n        +\n    </button>\n</div>\n\n<style>\n    .counter {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n        justify-content: center;\n    }\n    \n    button {\n        padding: 0.5rem 1rem;\n        cursor: pointer;\n    }\n</style>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:8 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => $state((state) => (state -= 1))}>-</button>\n  <span data-testid=\"count-value\">{$state}</span>\n  <button data-testid=\"increment-button\" on:click={() => $state((state) => (state += 1))}>+</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:57 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<script lang=\"ts\">\n  import { state } from '@sveltejs/reactive';\n\n  $state(0, count => {\n    decrement = () => count--;\n    increment = () => count++;\n  });\n</script>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:5:35 `$count` is an illegal variable name. To reference a global variable called `$count`, use `globalThis.$count`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<div class=\"counter\">\n  <button \n    data-testid=\"decrement-button\" \n    on:click={() => $state = { count: $state.count - 1 }}\n  >\n    -\n  </button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button \n    data-testid=\"increment-button\"\n    on:click={() => $state = { count: $state.count + 1 }}\n  >\n    +\n  </button>\n</div>\n\n<script>\n  $state = { count: 0 }\n</script>\n\n<style>\n  .counter {\n    padding: 1rem;\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n    justify-content: center;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:20:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n    $state('count', () => 0);\n</script>\n\n<div class=\"counter\">\n    <button \n        data-testid=\"decrement-button\"\n        on:click={() => count--}>\n        -\n    </button>\n    \n    <span data-testid=\"count-value\">{count}</span>\n    \n    <button \n        data-testid=\"increment-button\"\n        on:click={() => count++}>\n        +\n    </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:4 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let count = 0;\n\n  $state(count);\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count -= 1}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count += 1}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:6:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "derived",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number, 5);\n\n  $derived(doubled, () => number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte';\n\n  $state('number', 5);\n  \n  $derived('doubled', () => number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input type=\"number\" bind:value={$state.number}>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived.double}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state.number++}>\n    Increment\n  </button>\n</div>\n\n<script>\n  $state({ number: 5 });\n  $derived.double = () => $state.number * 2;\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:13:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number, 5)\n\n  $derived(doubled, number)\n  doubled = number * 2\n\n  clickIncrement() {\n    $state(number, number + 1)\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={clickIncrement}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:9:19 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n    $let(start = 5)\n\n    export function setup() {\n        $state(start)\n\n        $derived({\n            input: start,\n            fn: (val) => val * 2,\n            output: doubled\n        })\n    }\n\n    $effect(() => {\n        const button = document.querySelector('[data-testid=\"increment-button\"]')\n        if (button) {\n            button.addEventListener('click', () => {\n                start = start + 1\n            })\n        }\n    })\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {$start}</p>\n    <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n    <button data-testid=\"increment-button\">Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:4 `$let` is an illegal variable name. To reference a global variable called `$let`, use `globalThis.$let`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number, 5);\n\n  $derived(doubled, () => number * 2);\n\n  const incrementNumber = () => number++;\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={incrementNumber}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n    $state(number, 5);\n\n    $derived(doubled, () => number * 2);\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {$number}</p>\n    <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n    <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:10:43 `$number` is an illegal variable name. To reference a global variable called `$number`, use `globalThis.$number`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number, 5);\n\n  $derived(doubled) {\n    return number * 2;\n  }\n\n  const increment = () => {\n    number++;\n  };\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:20 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number, 5);\n\n  $derived(doubled, () => number * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived.double}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state.number++}>\n    Increment\n  </button>\n</div>\n\n<script>\n  $state.number = 5;\n  \n  $derived.double = $state => $state.number * 2;\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:12:2 `$state.number` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "derived-by",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(text = '');\n\n  $derived.by(text, (text) => {\n    const words = text.trim() ? text.trim().split(/\\s+/).length : 0;\n    const chars = text.length;\n    const isLong = words > 15;\n    return { words, chars, isLong };\n  });\n\n  function clearText() {\n    text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={text} \n    placeholder=\"Enter text...\"\n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={clearText}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.words}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.chars}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let text = $state('');\n\n  const words = $derived.by(text, t => (t.trim() ? t.trim().split(/\\s+/).length : 0));\n  const chars = $derived.by(text, t => t.length);\n  const isLong = $derived.by(text, t => t.trim().split(/\\s+/).length > 15);\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={text}\n    placeholder=\"Enter your text\"\n  />\n\n  <button\n    data-testid=\"clear-button\"\n    on:click={() => text = ''}\n  >\n    Clear\n  </button>\n\n  <div>\n    <p data-testid=\"word-count\">Words: {words}</p>\n    <p data-testid=\"char-count\">Characters: {chars}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:6:16 `$derived.by` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const state = $(textInput: '')\n  \n  const derived = $by({\n    wordCount: () => state.textInput.split(/\\s+/).filter(Boolean).length,\n    charCount: () => state.textInput.length,\n    isLong: derived => derived.wordCount > 15\n  })\n\n  const clearInput = () => {\n    state.textInput = ''\n  }\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={state.textInput}\n  />\n  <button\n    data-testid=\"clear-button\"\n    on:click={clearInput}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">\n      Words: {$derived.wordCount}\n    </p>\n    <p data-testid=\"char-count\">\n      Characters: {$derived.charCount}\n    </p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:27 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n    $state(text, '')\n\n    $effect(() => {\n        document.querySelector('[data-testid=\"text-input\"]').value = text\n    })\n\n    $derived.by(text, {\n        wordCount: (text) => text.trim() ? text.trim().split(/\\s+/).length : 0,\n        charCount: (text) => text.length,\n        isLong: (text) => text.trim().split(/\\s+/).length > 15\n    })\n</script>\n\n<div>\n    <input \n        data-testid=\"text-input\" \n        type=\"text\" \n        on:input={(e) => text = e.target.value}\n    />\n    <button \n        data-testid=\"clear-button\" \n        on:click={() => text = ''}\n    >\n        Clear\n    </button>\n    <div>\n        <p data-testid=\"word-count\">Words: {$$.wordCount}</p>\n        <p data-testid=\"char-count\">Characters: {$$.charCount}</p>\n        <p data-testid=\"length-indicator\">\n            Status: {$$.isLong ? 'Long text' : 'Short text'}\n        </p>\n    </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:30:44 `$$` is an illegal variable name. To reference a global variable called `$$`, use `globalThis.$$`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet $text = $state('', {\n  wordCount: $derived.by(() => $text.split(/\\s+/).length),\n  charCount: $derived.by(() => $text.length),\n  isLongText: $derived.by(() => $text.split(/\\s+/).length > 15),\n});\n\nfunction handleClear() {\n  $text = '';\n}\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <button data-testid=\"clear-button\" on:click={handleClear}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$text.wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$text.charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {$text.isLongText ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:4 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={$state.text}\n  />\n  <button\n    data-testid=\"clear-button\"\n    on:click={() => $state.text = ''}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">\n      Words: {$derived.by($state.text, (text) =>\n        text.trim().split(/\\s+/).filter(Boolean).length\n      )}\n    </p>\n    <p data-testid=\"char-count\">\n      Characters: {$derived.by($state.text, (text) => text.length)}\n    </p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.by(\n        $state.text,\n        (text) => text.trim().split(/\\s+/).filter(Boolean).length > 15 ? 'Long text' : 'Short text'\n      )}\n    </p>\n  </div>\n</div>\n\n<script>\n  $state.text = '';\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:34:2 `$state.text` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state = {\n    text: ''\n  };\n\n  const wordCount = $derived.by($state.text, text => \n    text.trim() === '' ? 0 : text.trim().split(/\\s+/).length\n  );\n\n  const charCount = $derived.by($state.text, text => text.length);\n\n  const isLong = $derived.by($state.text, text => \n    text.trim().split(/\\s+/).length > 15\n  );\n\n  function handleInput(event) {\n    $state.text = event.target.value;\n  }\n\n  function handleClear() {\n    $state.text = '';\n  }\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    value={$state.text}\n    on:input={handleInput}\n  />\n  <button data-testid=\"clear-button\" on:click={handleClear}>\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {#if isLong}Long text{:else}Short text{/if}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet $state = $: { text: '', isClear: false }\n\n$: $effect(() => {\n  $state.text = ''\n  $state.isClear = false\n}, [])\n\n$: $derived.by(\n  [$state.text],\n  ([text]) => {\n    const words = text.trim() ? text.trim().split(/\\s+/).length : 0\n    const chars = text.length\n    const isLong = words > 15\n\n    return {\n      words,\n      chars,\n      status: isLong ? 'Long text' : 'Short text',\n    }\n  }\n)\n\n$: $effect(() => {\n  if ($state.isClear) {\n    $state.text = ''\n    $state.isClear = false\n  }\n})\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    value={$state.text} \n    on:input={e => ($state.text = e.target.value)}\n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={() => ($state.isClear = true)}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$state.text.trim() ? $state.text.trim().split(/\\s+/).length : 0}</p>\n    <p data-testid=\"char-count\">Characters: {$state.text.length}</p>\n    <p data-testid=\"length-indicator\">Status: {($state.text.trim() ? $state.text.trim().split(/\\s+/).length : 0) > 15 ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:14 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(text = '');\n\n  $derived.by(text, value => ({\n    words: value.trim().split(/\\s+/).length,\n    characters: value.length,\n    isLong: value.trim().split(/\\s+/).length > 15\n  }));\n\n  function handleInput({ target }) {\n    $state.text = target.value;\n  }\n\n  function clear() {\n    $state.text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    {value}={text} \n    on:input={handleInput} \n  />\n  <button data-testid=\"clear-button\" on:click={clear}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.text.words}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.text.characters}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.text.isLong ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:25:11 Expected token >\nhttps://svelte.dev/e/expected_token"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(text: string) = '';\n\n  const handleInput = (event) => {\n    text = event.target.value;\n  };\n\n  const handleClear = () => {\n    text = '';\n  };\n\n  $derived.by(\n    [$state('text')],\n    ([text]) => {\n      const words = text.trim() ? text.trim().split(/\\s+/).length : 0;\n      const chars = text.length;\n      const isLong = words > 15;\n\n      return {\n        words,\n        chars,\n        status: isLong ? 'Long text' : 'Short text'\n      };\n    }\n  )\n  .then(({ words, chars, status }) => {\n    document.querySelector('[data-testid=\"word-count\"]').textContent = Words: ${words};\n    document.querySelector('[data-testid=\"char-count\"]').textContent = Characters: ${chars};\n    document.querySelector('[data-testid=\"length-indicator\"]').textContent = Status: ${status};\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" {value: text} on:input={handleInput} />\n  <button data-testid=\"clear-button\" on:click={handleClear}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: 0</p>\n    <p data-testid=\"char-count\">Characters: 0</p>\n    <p data-testid=\"length-indicator\">Status: Short text</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "each",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer']\n\n  function addGeorge() {\n    characters = [...characters, 'George']\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(characters = [\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n  function addGeorge() {\n    $state(characters = [...characters, \"George\"]);\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(characters = [\"Jerry\", \"Elaine\", \"Kramer\"])\n\n  $effect(addGeorge = () => {\n    characters.push(\"George\")\n    characters = characters\n  })\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(characters, []);\n\n  $handle('add', () => {\n    characters = [...characters, 'George'];\n  });\n\n  characters = ['Jerry', 'Elaine', 'Kramer'];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={Handle.add}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:2 `$handle` is an illegal variable name. To reference a global variable called `$handle`, use `globalThis.$handle`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t$state(characters = [\"Jerry\", \"Elaine\", \"Kramer\"]);\n\n\tfunction addGeorge() {\n\t\tcharacters.push(\"George\");\n\t\tcharacters = [...characters];\n\t}\n</script>\n\n<div>\n\t<ul data-testid=\"characters-list\">\n\t\t{#each characters as character}\n\t\t\t<li data-testid=\"character\">{character}</li>\n\t\t{/each}\n\t</ul>\n\t<button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:1 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(characters = ['Jerry', 'Elaine', 'Kramer']);\n\n  $effect(() => {\n    console.log(Current characters: ${characters.join(', ')});\n  });\n\n  function addGeorge() {\n    $state(characters = [...characters, 'George']);\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:7:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each $state.characters as character}\n      <li data-testid=\"character\">\n        {character}\n      </li>\n    {/each}\n  </ul>\n\n  <button\n    data-testid=\"add-george-button\"\n    on:click={() => {\n      $state.characters = [...$state.characters, 'George'];\n    }}\n  >\n    Add George\n  </button>\n</div>\n\n<script>\n  $state = {\n    characters: ['Jerry', 'Elaine', 'Kramer']\n  };\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:23:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "effect",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number = 5);\n  $state(doubled = 0);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n    let doubled = $state(10)\n\n    $effect(() => {\n        const num = $state(5)\n        doubled = num * 2\n    })\n\n    function increment() {\n        $state.update(n => n + 1)\n    }\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {$state}</p>\n    <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n    <button data-testid=\"increment-button\" on:click={increment}>\n        Increment\n    </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:12:8 `$state.update` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number = 5);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number = 5);\n\n  $effect((number) => {\n    doubled = number * 2;\n  });\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const number = $state(5);\n  const doubled = $state(0);\n\n  $effect(() => {\n    doubled.set(number.get() * 2);\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number.get()}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled.get()}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number.get() + 1)}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "number.get is not a function\n\n\tin <unknown>\n",
          "number.get is not a function\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.value}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$state.doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state.value += 1}>Increment</button>\n</div>\n\n<script>\n  $state.value = 5;\n\n  $effect(() => {\n    $state.doubled = $state.value * 2;\n  });\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:10:2 `$state.value` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let doubled = 10;\n    $: doubled = $state.number * 2;\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {$state.number}</p>\n    <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n    <button data-testid=\"increment-button\" on:click={() => $state.number += 1}>\n        Increment\n    </button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:5:4 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n$$effect($state(Number: number = 5), () => {\n  let doubled = $Number * 2;\n});\n\n$$effect(() => {\n  doubled;\n});\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$Number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => $Number++}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:2 The keyword 'let' is reserved\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\nlet $state = 5;\nlet $doubled;\n\n$effect(() => {\n  $doubled = $state * 2;\n});\n\nfunction increment() {\n  $state += 1;\n}\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:4 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(number, 5);\n\n  $effect(() => {\n    doubled = number * 2;\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => $set(number += 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:14:57 `$set` is an illegal variable name. To reference a global variable called `$set`, use `globalThis.$set`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "hello-world",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 9,
    "pass1": 0.9,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div\n  data-testid=\"greeting\"\n  class=\"greeting\"\n  style=\"\n    color: blue;\n    text-align: center;\n    margin: 1em;\n  \"\n>\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    \n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n.greeting {\n    color: blue;\n    text-align: center;\n    margin: 16px;\n}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n\t\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n\t.greeting {\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tmargin: 10px;\n\t}\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const greeting = \"Hello, World!\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {greeting}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let testId = \"greeting\";\n</script>\n\n<div data-testid={testId} class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    display: flex;\n    justify-content: center;\n    margin: 1rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 16px;\n    }\n</style>",
        "success": true,
        "errors": []
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "inspect",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(text = \"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log(\"Text updated:\", value);\n  });\n\n  $effect(() => {\n    $inspect.trace();\n    console.log(\"Effect ran with text:\", text);\n  });\n\n  $: charCount = text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state('text', 'Hello world')\n  $inspect('.text').with((value) => {\n    console.log('[Custom $inspect callback] Input value changed:', value)\n  })\n</script>\n\n<div>\n  <input \n    type=\"text\" \n    bind:value={text} \n    data-testid=\"text-input\" \n  />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>\n\n<script>\n  $inspect('.text')\n  $inspect.trace()\n</script>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:20:0 A component can have a single top-level `<script>` element and/or a single top-level `<script module>` element\nhttps://svelte.dev/e/script_duplicate"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { onMount } from 'svelte';\n\n  // Initialize state with \"Hello world\"\n  $state(text = \"Hello world\");\n\n  // Basic $inspect\n  $inspect(text);\n\n  // Custom callback with $inspect.with\n  $inspect(text).with(newVal => {\n    console.log(\"Text was updated:\", newVal);\n  });\n\n  // $inspect.trace in an effect\n  $effect(() => {\n    $inspect(text).trace();\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:7:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={$state.text} \n  />\n  <p data-testid=\"text-value\">Current text: \"{$state.text}\"</p>\n  <p data-testid=\"char-count\">Character count: {$state.text.length}</p>\n</div>\n\n<script>\n  $state.text = \"Hello world\";\n  $inspect($state.text);\n  \n  $inspect($state.text).with((value) => {\n    console.log(\"Text updated:\", value);\n  });\n  \n  $effect(() => {\n    $inspect.trace($state.text);\n  });\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:14:2 `$state.text` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(text, \"Hello world\");\n\n  $inspect(text);\n  $inspect(text).with((value) => {\n    console.log(\"Input updated:\", value);\n  });\n\n  $effect(() => {\n    text && $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(text = \"Hello world\")\n\n  let charCount = text.length\n\n  $inspect(text)\n    .with(value => console.log('Custom callback:', value))\n    .init()\n\n  $inspect.trace(text, \"Input value changed\")\n\n  $: charCount = text.length\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(text = \"Hello world\");\n\n  $inspect(text);\n\n  $inspect(text).with((value) => {\n    console.log(\"Text updated:\", value);\n  });\n\n  $effect(() => {\n    $inspect.trace(\"Text changed:\", text);\n  });\n\n  $: charCount = text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$state(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\nhttps://svelte.dev/e/state_invalid_placement"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { ref } from 'svelte';\n\n  $state = {\n    inputText: 'Hello world',\n  };\n\n  const inspectBasic = $inspect($state.inputText);\n\n  const inspectWithCallback = $inspect($state.inputText).with((text) => {\n    console.log('Custom handler: text changed to:', text);\n  });\n\n  $effect(() => {\n    $inspect.trace($state.inputText, 'Input text changed');\n  });\n\n  const charCount = $compute(() => $state.inputText.length);\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={$state.inputText}\n  />\n  <p data-testid=\"text-value\">\n    Current text: \"{$state.inputText}\"\n  </p>\n  <p data-testid=\"char-count\">\n    Character count: {charCount}\n  </p>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:20:20 `$compute` is an illegal variable name. To reference a global variable called `$compute`, use `globalThis.$compute`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state.text = \"Hello world\"\n  $inspect(text)\n  $inspect(text).with((newValue, oldValue) => console.log(Input updated from \"${oldValue}\" to \"${newValue}\"))\n\n  $effect(() => {\n    if (text.length > 0) {\n      $inspect.trace()\n    }\n  })\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={text}\n  />\n  <p data-testid=\"text-value\">Current text: \"{text}\"</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:64 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import _text from './stores/text';\n\n  const text = $state('Hello world');\n\n  $inspect(text);\n\n  $inspect(text).with(val => console.log('Updated value:', val));\n\n  $effect(() => {\n    $inspect.trace(text);\n    console.log('Input changed:', $text);\n  });\n\n  $: charCount = $text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <p data-testid=\"text-value\">Current text: \"{$text}\"</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:17:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "props",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props({\n    name: \"World\",\n    count: 0,\n    showDetails: false\n  });\n\n  $state(count, $props.count);\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$props()` can only be used at the top level of components as a variable declaration initializer\nhttps://svelte.dev/e/props_invalid_placement"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name || \"World\"}</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state.count++}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name || \"World\"}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>\n\n<script>\n  $state.count = $props.count || 0;\n</script>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:18:2 `$state.count` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<svelte:component>\n  $props(name: string = 'World')\n  $props(count: number = 0)\n  $props(showDetails: boolean = false)\n\n  $state localCount = count\n\n  <div>\n    <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n    \n    <p data-testid=\"count-display\">Count: {localCount}</p>\n    \n    <button \n      data-testid=\"increment-button\" \n      on:click={() => localCount++}\n    >\n      Increment\n    </button>\n\n    {#if showDetails}\n      <div data-testid=\"details\">\n        <p>Name is {name}</p>\n        <p>Count is {localCount}</p>\n        <p>ShowDetails is {showDetails}</p>\n      </div>\n    {/if}\n  </div>\n</svelte:component>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:3:0 `<svelte:component>` must have a 'this' attribute\nhttps://svelte.dev/e/svelte_component_missing_this"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props(name: \"World\", count: 0, showDetails: false)\n  \n  $state($state, {\n    count: $state(count)\n  })\n\n  function increment() {\n    $state.count++\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:13 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n$props({\n  name: String('World'),\n  count: Number(0),\n  showDetails: Boolean(false)\n})\n\nconst $count = $state(props.count)\n\n$effect(() => {\n  console.log(Props updated: ${JSON.stringify(props)})\n})\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$count}</p>\n  <button data-testid=\"increment-button\" on:click={() => $count += 1}>Increment</button>\n\n  {#if props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {props.name}</p>\n      <p>Count is {$count}</p>\n      <p>ShowDetails is {props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:13:20 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<props-rune name=\"World\" count={0} showDetails={false}>\n  <svelte:options tag=\"div\" />\n  <script>\n    $state(countValue = $props.count);\n\n    function increment() {\n      countValue += 1;\n    }\n  </script>\n\n  <h1 data-testid=\"name-display\">\n    Hello, {$props.name}!\n  </h1>\n\n  <p data-testid=\"count-display\">\n    Count: {$state.countValue}\n  </p>\n\n  <button data-testid=\"increment-button\" on:click={increment}>\n    Increment\n  </button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.countValue}</p>\n      <p>ShowDetails is {String($props.showDetails)}</p>\n    </div>\n  {/if}\n</props-rune>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:4:2 A component can only have one `<svelte:options>` element\nhttps://svelte.dev/e/svelte_meta_duplicate"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props.defaultProps({\n    name: 'World',\n    count: 0,\n    showDetails: false\n  });\n\n  let accent = count;\n\n  $effect(() => {\n    accent = $props.count;\n  });\n\n  function increment() {\n    $props.count += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$props.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$props.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$props.defaultProps` is not a valid rune\nhttps://svelte.dev/e/rune_invalid_name"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props = {\n    name: { type: String, default: 'World' },\n    count: { type: Number, default: 0 },\n    showDetails: { type: Boolean, default: false }\n  }\n\n  $state = {\n    count: $props.count\n  }\n\n  function incrementCount() {\n    $state.count += 1\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.count}</p>\n  <button data-testid=\"increment-button\" on:click={incrementCount}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props = {\n    name: {\n      type: String,\n      default: \"World\"\n    },\n    count: {\n      type: Number,\n      default: 0\n    },\n    showDetails: {\n      type: Boolean,\n      default: false\n    }\n  }\n\n  $state = {\n    currentCount: $props.count\n  }\n\n  function increment() {\n    $state.currentCount += 1\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state.currentCount}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>\n    Increment\n  </button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state.currentCount}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use rune without parentheses\nhttps://svelte.dev/e/rune_missing_parentheses"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $props(name = \"World\", count = 0, showDetails = false)\n  $state(localCount = count)\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {localCount}</p>\n  <button\n    data-testid=\"increment-button\"\n    on:click={() => $state(localCount += 1)}\n  >\n    Increment\n  </button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {localCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$props()` can only be used at the top level of components as a variable declaration initializer\nhttps://svelte.dev/e/props_invalid_placement"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  },
  {
    "testName": "snippets",
    "provider": "OpenRouter",
    "modelId": "deepcogito/cogito-v2-preview-llama-405b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  $snippet(title, bookTitle) {\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:29 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<snippet title {title}>\n  <span data-testid=\"book-title\">{title}</span>\n</snippet>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:7:15 Attributes need to be unique\nhttps://svelte.dev/e/attribute_duplicate"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $snippet(title, (bookTitle) => {\n    return (\n      <span data-testid=\"book-title\">\n        {bookTitle}\n      </span>\n    );\n  });\n\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"]\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>\n\n<:title={title}>\n  <span data-testid=\"book-title\">{title}</span>\n</:title>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:15:1 Expected a valid element or component name. Components must have a valid variable name or dot notation expression\nhttps://svelte.dev/e/tag_invalid_name"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $state(books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ]);\n\n  function title(bookTitle) {\n    <span data-testid=\"book-title\">{bookTitle}</span>;\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:11:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  $snippet({\n    title: (title) => (\n      <span data-testid=\"book-title\">{title}</span>\n    )\n  });\n</script>\n\n<ul>\n  {#each books as book (book)}\n    <li data-testid=\"book-item\">\n      {@render snippet.title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:12:6 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<ul>\n  {#each [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"] as book}\n    {@render title(book)}\n  {/each}\n\n  <snippet {title}>\n    <li data-testid=\"book-item\">\n      <span data-testid=\"book-title\">{title}</span>\n    </li>\n  </snippet>\n</ul>",
        "success": false,
        "errors": [
          "title is not defined\n\n\tin <unknown>\n\tin Component.svelte\n",
          "title is not defined\n\n\tin <unknown>\n\tin Component.svelte\n",
          "title is not defined\n\n\tin <unknown>\n\tin Component.svelte\n"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n    const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n    $snippet('title', (title) => {\n        <span data-testid=\"book-title\">{title}</span>\n    });\n</script>\n\n<ul>\n    {#each books as book}\n        <li data-testid=\"book-item\">\n            {@render title(book)}\n        </li>\n    {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:7:8 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  snippet title(title: string) {\n    <span data-testid=\"book-title\">{title}</span>\n  }\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">\n      {@render title(book)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:6:10 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n</script>\n\n<snippet :title(let:bookTitle)>\n  <span data-testid=\"book-title\">{bookTitle}</span>\n</snippet>\n\n<ul>\n  {#each books as title}\n    <li data-testid=\"book-item\">\n      {@render title(bookTitle: title)}\n    </li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/k/Documents/GitHub/svelte-bench/tmp/samples/openrouter/Component.svelte:18:30 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ],
    "timestamp": "2025-10-17T19:39:14.181Z"
  }
]