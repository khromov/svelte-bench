[
  {
    "testName": "counter",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$state/store';\n  const count = $state(0);\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => $state.count -= 1}>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={() => $state.count += 1}>+</button>\n</div>\n\n<style>\n  .counter {\n    /* Add your styles here */\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to resolve import \"$state/store\" from \"tmp/samples/openrouter/Component.svelte\". Does the file exist?"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n\n  $: count = 0;\n\n  function increment() {\n    count = count + 1;\n    dispatch('increment', count);\n  }\n\n  function decrement() {\n    count = count - 1;\n    dispatch('decrement', count);\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:8:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from '$state';\n\n  const count = state(0);\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count.decrement() }>-</button>\n  <span data-testid=\"count-value\">{$count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count.increment() }>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Failed to resolve import \"$state\" from \"tmp/samples/openrouter/Component.svelte\". Does the file exist?"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from 'svelte/store';\n\n  $state.count = 0;\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => $state.count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => $state.count++}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Cannot set properties of undefined (setting 'count')\n\n\tin <unknown>\n",
          "Cannot set properties of undefined (setting 'count')\n\n\tin <unknown>\n",
          "Cannot set properties of undefined (setting 'count')\n\n\tin <unknown>\n",
          "Cannot set properties of undefined (setting 'count')\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script context=\"module\">\n  export let $state = {\n    count: 0\n  };\n</script>\n\n<script>\n  function increment() {\n    $state.count += 1;\n  }\n\n  function decrement() {\n    $state.count -= 1;\n  }\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{$state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n  }\n</style>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $: state = { count: 0 };\n\n  function increment() {\n    state.count++;\n  }\n\n  function decrement() {\n    state.count--;\n  }\n</script>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n</style>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={decrement}>-</button>\n  <span data-testid=\"count-value\">{state.count}</span>\n  <button data-testid=\"increment-button\" on:click={increment}>+</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from 'svelte/storage';\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => state.decrement()}>-</button>\n  <span data-testid=\"count-value\">{state.count}</span>\n  <button data-testid=\"increment-button\" on:click={() => state.increment()}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n</style>",
        "success": false,
        "errors": [
          "Missing \"./storage\" specifier in \"svelte\" package"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state } from 'svelte/internal'; // For Svelte 5 state reactivity\n  \n  let count = $state(0);\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Imports of `svelte/internal/*` are forbidden. It contains private runtime code which is subject to change without notice. If you're importing from `svelte/internal/*` to work around a limitation of Svelte, please open an issue at https://github.com/sveltejs/svelte and explain your use case\nhttps://svelte.dev/e/import_svelte_internal_forbidden"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script context=\"module\">\n  import { $state } from 'svelte/store';\n</script>\n\n<script>\n  let count = 0;\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count--}>-</button>\n  <span data-testid=\"count-value\">{count}</span>\n  <button data-testid=\"increment-button\" on:click={() => count++}>+</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte5-primitives';\n\n  const count = $state(0);\n</script>\n\n<div class=\"counter\">\n  <button data-testid=\"decrement-button\" on:click={() => count.decrement()}>-</button>\n  <span data-testid=\"count-value\">{$state(count)}</span>\n  <button data-testid=\"increment-button\" on:click={() => count.increment()}>+</button>\n</div>\n\n<style>\n  .counter {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n  }\n</style>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      }
    ]
  },
  {
    "testName": "derived",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte/store';\n\n  const number = $state(5);\n  const doubled = $derived($number => $number * 2);\n\n  function increment() {\n    number.update(n => n + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from '$lib/svelte5-core';\n\n  const number = state(5);\n  const doubled = derived($number, $val => $val * 2);\n\n  function increment() {\n    $number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Failed to resolve import \"$lib/svelte5-core\" from \"tmp/samples/openrouter/Component.svelte\". Does the file exist?"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script rune>\n  import { $state, $derived } from 'svelte/reactiveness';\n</script>\n\n<input type=\"number\" bind:value={$state(number)} />\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>\n\n<script>\n  export let number = 5;\n  const doubled = $derived(number * 2);\n</script>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:15:0 A component can have a single top-level `<script>` element and/or a single top-level `<script module>` element\nhttps://svelte.dev/e/script_duplicate"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let number = 5;\n  $: doubled = number * 2;\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state(number)}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived(doubled)}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/store';\n\n  const number = $state(5);\n  const doubled = $derived($number => $number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number.set(number + 1)}>\n    Increment\n  </button>\n</div>",
        "success": false,
        "errors": [
          "$state(...) is not a function\n\n\tin <unknown>\n",
          "$state(...) is not a function\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<div>\n  <input type=\"number\" binder_value=\"$state.number\" data-testid=\"number-value\">\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived.doubledValue}</p>\n  <button data-testid=\"increment-button\" on:click=\"$effect(() => {$state.number += 1})\">\n    Increment\n  </button>\n</div>\n\n<script context=\"module\">\n  export let $derived = {\n    doubledValue: $state.number * 2\n  };\n</script>\n\n<script>\n  import { $state } from 'svelte/store';\n</script>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:7:51 Directive value must be a JavaScript expression enclosed in curly braces\nhttps://svelte.dev/e/directive_invalid_value"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = { number: 5 };\n  let doubled = $derived($state, $ => 2 * $);\n</script>\n\n<button on:click={() => $state.number += 1}>Increment</button>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived } from 'svelte/store';\n\n  $: number = state(5);\n  $: doubled = derived(number, $ = $state * 2);\n\n  function increment() {\n    number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:7:31 `$` is an illegal variable name. To reference a global variable called `$`, use `globalThis.$`\nhttps://svelte.dev/e/global_reference_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script context=\"module\">\n  export let $state = {\n    number: 5\n  };\n</script>\n\n<script>\n  export let $derived = {\n    doubled: ($state.number * 2)\n  };\n\n  function increment() {\n    $state.number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived.doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, derived, onMount } from 'svelte/runes';\n\n  $state value = 5;\n  $derived doubled = $derived(value * 2);\n\n  function increment() {\n    value += 1;\n  }\n\n  onMount(() => {\n    // Handling initialization or cleanup if needed\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state value}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$derived doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ]
  },
  {
    "testName": "derived-by",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { store } from 'svelte/store';\n\n  const text = store('');\n  const wordCount = $derived.by(text, ({ val }) => {\n    return val.trim() === '' ? 0 : val.trim().split(/\\s+/).length;\n  });\n  const charCount = $derived.by(text, ({ val }) => val.length);\n  const isLong = $derived.by(text, ({ val }) => wordCount > 15);\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={$text} \n    placeholder=\"Enter text...\"\n  />\n  <button data-testid=\"clear-button\" on:click={() => $text = ''}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:7:20 `$derived.by` must be called with exactly one argument\nhttps://svelte.dev/e/rune_invalid_arguments_length"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    text: '',\n    words: 0,\n    characters: 0,\n    isLong: false\n  };\n\n  const handleInput = () => {\n    const text = $state.text;\n    $state = {\n      ...$state,\n      words: text.split(/\\s+/).filter(word => word.length > 0).length,\n      characters: text.length,\n      isLong: $state.words > 15\n    };\n  };\n\n  const clearText = () => {\n    $state = {\n      ...$state,\n      text: '',\n      words: 0,\n      characters: 0,\n      isLong: false\n    };\n  };\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    value={$state.text}\n    on:input={handleInput}\n  />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$state.words}</p>\n    <p data-testid=\"char-count\">Characters: {$state.characters}</p>\n    <p data-testid=\"length-indicator\">Status: {$state.isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $derived } from 'svelte/runtime';\n\n  let $state.text = '';\n\n  const { wordCount, charCount, isLong } = $derived.by{\n    text: $state.text,\n    wordCount: ({ text }) => text ? text.split(/\\s+/).filter(Boolean).length : 0,\n    charCount: ({ text }) => text?.length || 0,\n    isLong: ({ text }) => $derived.by{\n      wordCount: ({ text }) => text ? text.split(/\\s+/).filter(Boolean).length : 0,\n      isLong: ({ wordCount }) => wordCount > 15\n    }\n  };\n\n  const handleClear = () => {\n    $state.text = '';\n  };\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    value={$state.text}\n    on:input={(e) => $state.text = e.target.value}\n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={handleClear}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:6:6 Identifier '$state' has already been declared\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = { text: '' };\n\n  const wordCount = $derived.by($state, ({ text }) => text.trim().split(/\\s+/).length);\n  const charCount = $derived.by($state, ({ text }) => text.length);\n  const isLongText = $derived.by($state, ({ text }) => wordCount > 15);\n\n  function handleClear() {\n    $state.text = '';\n  }\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    value={$state.text}\n    bind:value\n  />\n  <button \n    data-testid=\"clear-button\" \n    on:click={handleClear}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {$isLongText ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:20:4 Attributes need to be unique\nhttps://svelte.dev/e/attribute_duplicate"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    text: ''\n  };\n</script>\n\n<div>\n  <input \n    data-testid=\"text-input\" \n    type=\"text\" \n    bind:value={$state.text}\n  />\n  <button data-testid=\"clear-button\" on:click={() => $state.text = ''}>\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">\n      Words: {$derived.by($state.text, (text) => text.trim().split(/\\s+/).length)}\n    </p>\n    <p data-testid=\"char-count\">\n      Characters: {$derived.by($state.text, (text) => text.trim().length)}\n    </p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.by($state.text, (text) => text.trim().length > 15 ? 'Long text' : 'Short text')}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    inputText: ''\n  };\n\n  const wordCount = $derived.by({\n    inputs: [$state.inputText],\n    computed: () => $state.inputText.split(/\\s+/).length\n  });\n\n  const charCount = $derived.by({\n    inputs: [$state.inputText],\n    computed: () => $state.inputText.length\n  });\n\n  const isLong = $derived.by({\n    inputs: [wordCount],\n    computed: () => wordCount.value > 15\n  });\n\n  const clearText = () => {\n    $state.inputText = '';\n    wordCount.value = 0;\n    charCount.value = 0;\n    isLong.value = false;\n  };\n</script>\n\n<div>\n  <input \n    bind:value={$state.inputText} \n    data-testid=\"text-input\" \n    type=\"text\"\n  />\n  <button data-testid=\"clear-button\" on:click={clearText}>Clear</button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount.value}</p>\n    <p data-testid=\"char-count\">Characters: {charCount.value}</p>\n    <p data-testid=\"length-indicator\">Status: {isLong.value ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    text: ''\n  };\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    bind:value={$state.text}\n    type=\"text\"\n  />\n  <button\n    data-testid=\"clear-button\"\n    on:click={() => ($state.text = '')}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">\n      Words: {$derived.words($state.text)}\n    </p>\n    <p data-testid=\"char-count\">\n      Characters: {$derived.count($state.text)}\n    </p>\n    <p data-testid=\"length-indicator\">\n      Status: {$derived.by($state.text, (text) => text.split(' ').length > 15) ? 'Long text' : 'Short text'}\n    </p>\n  </div>\n</div>\n\n<script>\n  $effect({ text: () => Object.freeze({ count: (text) => text ? text.trim().split(' ').length : 0, words: (text) => $state.text ? $derived.count($state.text) : 0, by: (text, test) => text ? test(text) : false } ) });\n</script>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:34:0 A component can have a single top-level `<script>` element and/or a single top-level `<script module>` element\nhttps://svelte.dev/e/script_duplicate"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = {\n    text: ''\n  };\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={$state.text}\n  />\n  <button data-testid=\"clear-button\" on:click={() => ($state.text = '')}>\n    Clear\n  </button>\n\n  <div>\n    <p data-testid=\"word-count\">Words: {$derived.by($state).wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$derived.by($state).charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {\n        $derived.by($state).isLong\n          ? 'Long text'\n          : 'Short text'\n      }\n    </p>\n  </div>\n</div>\n\n<script>\n  import { derived } from 'svelte/store';\n\n  export let $derived = {\n    by: store => ({\n      wordCount: store.text.split(/\\s+/).length || 0,\n      charCount: store.text.length,\n      isLong: store.text.split(/\\s+/).length > 15\n    })\n  };\n</script>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:32:0 A component can have a single top-level `<script>` element and/or a single top-level `<script module>` element\nhttps://svelte.dev/e/script_duplicate"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let $state = { text: '' };\n\n  const { wordCount: wordCount, charCount: charCount, isLongText: isLongText } = $derived.by($state.text, {\n    wordCount: (text) => text ? text.trim().split(/\\s+/).length : 0,\n    charCount: (text) => text ? text.length : 0,\n    isLongText: (text, wordCount) => wordCount > 15,\n  });\n\n  function handleClear() {\n    $state.text = '';\n    wordCount.set(0);\n    charCount.set(0);\n    isLongText.set(false);\n  }\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={$state.text}\n  />\n  <button\n    data-testid=\"clear-button\"\n    on:click={handleClear}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {charCount}</p>\n    <p data-testid=\"length-indicator\">Status: {isLongText ? 'Long text' : 'Short text'}</p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { derived } from 'svelte/store';\n\n  $state currentText = '';\n  const maxWordCountForLong = 15;\n\n  const wordCount = derived(\n    currentText,\n    ($text, set) => set($text.trim() === '' ? 0 : $text.trim().split(/\\s+/).length),\n    0\n  );\n\n  const charCount = derived(\n    currentText,\n    ($text, set) => set($text.length),\n    0\n  );\n\n  const isLong = derived(\n    wordCount,\n    ($wordCount, set) => set($wordCount > maxWordCountForLong),\n    false\n  );\n\n  const $effects = {\n    init() {\n      this.currentText = '';\n    }\n  };\n</script>\n\n<div>\n  <input\n    bind:value=\"$state.currentText\"\n    data-testid=\"text-input\"\n    type=\"text\"\n  />\n  <button\n    data-testid=\"clear-button\"\n    on:click={() => ($state.currentText = '')}\n  >\n    Clear\n  </button>\n  <div>\n    <p data-testid=\"word-count\">Words: {$wordCount}</p>\n    <p data-testid=\"char-count\">Characters: {$charCount}</p>\n    <p data-testid=\"length-indicator\">\n      Status: {'Long text' if $isLong else 'Short text'}\n    </p>\n  </div>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:6:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ]
  },
  {
    "testName": "each",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters.push(\"George\")}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = ['Jerry', 'Elaine', 'Kramer'];\n\n  function addGeorge() {\n    characters = [...characters, 'George'];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character, index}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters = [...characters, \"George\"]}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  let showGeorge = false;\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button \n    data-testid=\"add-george-button\"\n    on:click={() => {\n      showGeorge = true;\n      if (showGeorge) {\n        characters = [...characters, \"George\"];\n      }\n    }}\n  >\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n  \n  function addGeorge() {\n    characters = [...characters, \"George\"];\n  }\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n\n    function addGeorge() {\n        characters = [...characters, \"George\"];\n    }\n</script>\n\n<div>\n    <ul data-testid=\"characters-list\">\n        {#each characters as character (character)}\n            <li data-testid=\"character\">{character}</li>\n        {/each}\n    </ul>\n    <button data-testid=\"add-george-button\" on:click={addGeorge}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character, i (characters[i])}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters.push(\"George\")}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters.push(\"George\")}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters.push(\"George\")}>\n    Add George\n  </button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let characters = [\"Jerry\", \"Elaine\", \"Kramer\"];\n</script>\n\n<div>\n  <ul data-testid=\"characters-list\">\n    {#each characters as character (character)}\n      <li data-testid=\"character\">{character}</li>\n    {/each}\n  </ul>\n  <button data-testid=\"add-george-button\" on:click={() => characters = [...characters, \"George\"]}>Add George</button>\n</div>",
        "success": false,
        "errors": [
          "expected 3 to be 4 // Object.is equality"
        ]
      }
    ]
  },
  {
    "testName": "effect",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script context=\"module\">\n  export let number = 5;\n</script>\n\n<script>\n  $: doubled = number * 2;\n</script>\n\n<script context=\"effect\">\n  $: double($state.number);\n  function double(value) {\n    console.log(Doubled: ${value});\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:14:23 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, effect } from 'svelte/imported';\n\n  export let number = state(5);\n  let doubled = effect(() => $state * 2);\n\n  function increment() {\n    $number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:6:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, effect } from 'svelte/store-runes';\n  \n  const number = state(5);\n  \n  const doubled = effect($number => $number * 2);\n  \n  function increment() {\n    $number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {$doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Missing \"./store-runes\" specifier in \"svelte\" package"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let number = 5;\n\n  $: doubled = number * 2;\n  $: $effect(() => {\n    console.log('Number doubled:', doubled);\n  });\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let; // Empty because Svelte 5 doesn't need declarations in exports\n\n  let state = {\n    number: 5\n  };\n\n  let doubled;\n\n  $effect(() => {\n    doubled = state.number * 2;\n  });\n\n  function handleIncrement() {\n    state.number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={handleIncrement}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:9 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $: $state = { number: 5 };\n  $: $effect(doubled = $state.number * 2);\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {$state.number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state.number += 1}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, effect } from 'svelte/runtime';\n\n  const number = $state(5);\n  const doubled = $effect(() => $state($number * 2));\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state($number + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "Missing \"./runtime\" specifier in \"svelte\" package"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script context=\"module\">\n  import { state, effect } from 'svelte/store';\n</script>\n\n<script>\n  const number = state(5);\n  const doubled = effect(($number) => $number * 2, [$number]);\n\n  function increment() {\n    number.update(n => n + 1);\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "(0 , state) is not a function\n\n\tin <unknown>\n",
          "(0 , state) is not a function\n\n\tin <unknown>\n"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  $: $state = { number: 5 };\n\n  $: doubled = $state.number * 2;\n\n  $: const { number } = $state;\n  $: $effect(() => {\n    console.log('Number doubled:', doubled);\n  });\n\n  function Increment() {\n    $state.number += 1;\n  }\n</script>\n\n<div>\n  <p data-testid=\"number-value\">Number: {number}</p>\n  <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n  <button data-testid=\"increment-button\" on:click={Increment}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:8:5 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script context=\"module\">\n    import { $state, $effect } from '$lib/svelte';\n</script>\n\n<script>\n    const number = $state(5);\n    let doubled;\n\n    $effect(() => {\n        doubled = $state(number * 2);\n    });\n</script>\n\n<div>\n    <p data-testid=\"number-value\">Number: {number}</p>\n    <p data-testid=\"doubled-value\">Doubled: {doubled}</p>\n    <button data-testid=\"increment-button\" on:click={() => number.set(number + 1)}>Increment</button>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:13 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      }
    ]
  },
  {
    "testName": "hello-world",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 10,
    "pass1": 1,
    "pass10": 1,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n    // No script is required for this simple component\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    Hello, World!\n</div>\n\n<style>\n    div {\n        color: blue;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        margin: 1rem;\n    }\n    \n    .greeting {\n        /* Additional styling can be added as needed */\n    }\n</style>",
        "success": true,
        "errors": [],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let greeting = \"Hello, World!\";\n</script>\n\n<div \n    data-testid=\"greeting\" \n    class=\"greeting\"\n    style=\"color: blue; display: flex; justify-content: center; align-items: center; margin: 20px;\"\n>\n    {greeting}\n</div>\n\n<style>\n    .greeting {\n        text-align: center;\n    }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  // No script logic needed for this simple component\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 20px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<style global>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>\n\n<div data-testid=\"greeting\" class=\"greeting\">Hello, World!</div>",
        "success": true,
        "errors": []
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n    let message = \"Hello, World!\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n    {message}\n</div>\n\n<style>\n    .greeting {\n        color: blue;\n        text-align: center;\n        margin: 10px;\n    }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  Hello, World!\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 10px;\n  }\n</style>",
        "success": true,
        "errors": []
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  let title = \"Hello, World!\";\n</script>\n\n<div data-testid=\"greeting\" class=\"greeting\">\n  {title}\n</div>\n\n<style>\n  .greeting {\n    color: blue;\n    text-align: center;\n    margin: 1rem;\n  }\n</style>",
        "success": true,
        "errors": []
      }
    ]
  },
  {
    "testName": "inspect",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, inspect, trace } from '$utils';\n\n  const text = $state('Hello world');\n\n  inspect(text).plain;\n  inspect(text).with({ update: (newVal) => console.log('Updated value:', newVal) });\n\n  $effect(() => {\n    inspect.trace(text);\n  });\n\n  $: charCount = text.length;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {charCount}</p>\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:15:2 `$:` is not allowed in runes mode, use `$derived` or `$effect` instead\nhttps://svelte.dev/e/legacy_reactive_statement_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, with, trace } from 'svelte/internal';\n  import { onMount } from 'svelte';\n\n  export let text = $state('Hello world');\n  let count = 0;\n\n  // Basic $inspect\n  $inspect($text = text, $effect = () => {\n    console.log('Plain $inspect:', $text);\n  });\n\n  // $inspect with a custom callback\n  const updatedText = $inspect($text).with(newValue => {\n    console.log('With callback $inspect:', newValue);\n  });\n\n  // $inspect.trace() inside an effect\n  onMount(() => {\n    $inspect.trace(text, () => {\n      console.log('Trace effect:', text);\n    });\n  });\n\n  $effect(() => {\n    count = text.length;\n  });\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value={text}\n  />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {count}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:29 Unexpected keyword 'with'\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $effect } from 'svelte/runes';\n\n  const text = $state('Hello world');\n\n  const inspectText = $inspect(text).with(value => {\n    console.log('Input updated:', value);\n    return value;\n  });\n\n  $effect(() => {\n    inspectText.trace('Input value trace');\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $inspectTrace } from 'svelte5/internal';\n\n  let text = \"Hello world\";\n\n  // Basic $inspect logging\n  $inspect(text);\n\n  // $inspect with custom callback\n  const callback = (newValue) => {\n    console.log(Input changed to: ${newValue});\n  };\n  $inspect(text).with(callback);\n\n  // $inspect.trace in effect\n  import { onMount } from 'svelte5';\n  onMount(() => {\n    $inspectTrace(text);\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={text} />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:13:22 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $effect } from 'svelte5/internal';\n  \n  let text = 'Hello world';\n\n  // Basic $inspect for logging\n  $inspect(text).watch((value) => {\n    console.log('Basic inspect:', value);\n  });\n\n  // $inspect with custom callback\n  $inspect(...[text]).with(\n    (value) => {\n      console.log('Custom inspect callback:', value);\n    }\n  ).watch();\n\n  // $inspect.trace in an effect running on update\n  $effect(() => {\n    $inspect.trace(text).watch((value) => {\n      console.log('Trace inspection:', value);\n    });\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, $inspectWith, $inspectTrace, effect } from '$inspect';\n  import { get } from 'svelte/store';\n\n  let text = 'Hello world';\n\n  // Basic $inspect\n  const originalInspection = $inspect(text);\n\n  // $inspect with custom callback\n  const inspectedWithCallback = $inspectWith(text, (newText, oldText) => {\n    console.log(Input changed from \"${oldText}\" to \"${newText}\");\n  });\n\n  // $inspect.trace effect\n  effect(() => {\n    $inspectTrace(text, () => {\n      console.log('Trace callback triggered (on text change)');\n    });\n    return () => {\n      $inspectTrace.cancel(); // Cleanup when effect stops\n    };\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:14:22 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state } from 'svelte/store';\n  import { $inspect } from 'svelte/debug';\n  import { onMount } from 'svelte';\n\n  const text = $state('Hello world');\n\n  const traceInspect = $inspect(text).with(value => console.log('Text changed:', value));\n  onMount(() => $inspect.trace());\n\n  let textInputValid = false;\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script lang=\"ts\">\n  import { $state, $inspect, with, trace } from 'svelte/rune';\n\n  const text = $state('Hello world');\n\n  const handleInspect = (newVal: string) => {\n    console.log('Input value changed:', newVal);\n  };\n\n  const effect = () => {\n    $inspect(text).with(handleInspect);\n    trace($inspect(text));\n  };\n\n  $: {\n    effect();\n  }\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value=\"{text}\" />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:4:29 Unexpected keyword 'with'\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { $state, $inspect, effect } from '$lib/svelte-5';\n\n  const text = $state('Hello world');\n\n  $effect(() => {\n    $inspect(text).with((value, oldValue) => {\n      console.log(Text updated: ${oldValue} → ${value});\n    });\n  });\n\n  $effect(() => {\n    $inspect.trace(text);\n  });\n</script>\n\n<div>\n  <input\n    data-testid=\"text-input\"\n    type=\"text\"\n    bind:value=\"{text}\"\n  />\n  <p data-testid=\"text-value\">Current text: {text}</p>\n  <p data-testid=\"char-count\">Character count: {text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:10:23 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  import { state, inspect } from 'svelte5';\n  \n  const text = state(\"Hello world\");\n  \n  inspect(text, value => {\n    console.log(\"Value changed:\", value);\n  });\n  \n  inspect(text, {\n    with: (value, oldValue) => {\n      console.log(Value updated from ${oldValue} to ${value});\n    }\n  });\n  \n  import { onMount } from 'svelte5';\n  \n  onMount(() => {\n    inspect($text).trace();\n  });\n</script>\n\n<div>\n  <input data-testid=\"text-input\" type=\"text\" bind:value={$text} />\n  <p data-testid=\"text-value\">Current text: {$text}</p>\n  <p data-testid=\"char-count\">Character count: {$text.length}</p>\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:14:24 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ]
  },
  {
    "testName": "props",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n    export let name = \"World\";\n    export let count = 0;\n    export let showDetails = false;\n\n    $: stateCount = count;\n</script>\n\n<div>\n    <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n    <p data-testid=\"count-display\">Count: {$props.count}</p>\n    <button data-testid=\"increment-button\" on:click={() => count++}>Increment</button>\n\n    {#if $props.showDetails}\n        <div data-testid=\"details\">\n            <p>Name is {$props.name}</p>\n            <p>Count is {$props.count}</p>\n            <p>ShowDetails is true</p>\n        </div>\n    {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:4 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  let stateCount = count;\n</script>\n\n{#if showDetails}\n  <div data-testid=\"details\">\n    <p>Name is {name}</p>\n    <p>Count is {stateCount}</p>\n    <p>ShowDetails is {showDetails}</p>\n  </div>\n{/if}\n\n<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n<p data-testid=\"count-display\">Count: {stateCount}</p>\n<button data-testid=\"increment-button\" on:click={() => stateCount++}>\n  Increment\n</button>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  let passedCount = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {passedCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => passedCount += 1}>\n    Increment\n  </button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {passedCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script context=\"module\">\n  export function props({ name = \"World\", count = 0, showDetails = false }) {\n    return { name, count, showDetails };\n  }\n</script>\n\n<script>\n  import { afterUpdate } from 'svelte';\n\n  export let name;\n  export let count = 0;\n  export let showDetails = false;\n\n  let $state = count;\n\n  function increment() {\n    $state += 1;\n  }\n\n  afterUpdate(() => {\n    console.log(showDetails);\n  });\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is true</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:16:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  import { state } from 'svelte/store';\n  let countState = count;\n\n  function increment() {\n    countState += 1;\n  }\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$props.count}</p>\n  <button data-testid=\"increment-button\" on:click={increment}>Increment</button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$props.count}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  $: $state = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {count}</p>\n  <button data-testid=\"increment-button\" on:click={() => count += 1}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {count}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  $: state.count = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {state.count}</p>\n  <button data-testid=\"increment-button\" on:click={() => state.count++}>\n    Increment\n  </button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {state.count}</p>\n      <p>ShowDetails is {Boolean(showDetails)}</p>\n    </div>\n  {/if}\n</div>\n\n<script>\n  let state = { count: 0 };\n</script>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:27:0 A component can have a single top-level `<script>` element and/or a single top-level `<script module>` element\nhttps://svelte.dev/e/script_duplicate"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  import { state } from '@sveltejs/kit/v5';\n\n  let $state = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {$props.name}!</h1>\n  <p data-testid=\"count-display\">Count: {$state}</p>\n  <button data-testid=\"increment-button\" on:click={() => $state = $state + 1}>\n    Increment\n  </button>\n\n  {#if $props.showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {$props.name}</p>\n      <p>Count is {$state}</p>\n      <p>ShowDetails is {$props.showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:10:6 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  import { state } from \"$lib/stores/state\"; // Assume this is the store being used\n\n  // Increment count using $state store\n  $: increment = () => {\n    $state.count += 1;\n  };\n</script>\n\n{#if showDetails}\n  <div data-testid=\"details\">\n    <p>Name is {name}</p>\n    <p>Count is {count}</p>\n    <p>ShowDetails is {showDetails}</p>\n  </div>\n{/if}\n\n<h1 data-testid=\"name-display\">Hello, {name}!</h1>\n<p data-testid=\"count-display\">Count: {count}</p>\n<button data-testid=\"increment-button\" on:click={increment}>Increment</button>",
        "success": false,
        "errors": [
          "tmp/samples/openrouter/Component.svelte:4:2 Cannot use `export let` in runes mode — use `$props()` instead\nhttps://svelte.dev/e/legacy_export_invalid"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  export let name = \"World\";\n  export let count = 0;\n  export let showDetails = false;\n\n  import { $state } from 'svelte/store';\n\n  let reactiveCount = count;\n  $: reactiveCount = count;\n</script>\n\n<div>\n  <h1 data-testid=\"name-display\">Hello, {name}!</h1>\n  <p data-testid=\"count-display\">Count: {reactiveCount}</p>\n  <button data-testid=\"increment-button\" on:click={() => reactiveCount += 1}>Increment</button>\n\n  {#if showDetails}\n    <div data-testid=\"details\">\n      <p>Name is {name}</p>\n      <p>Count is {reactiveCount}</p>\n      <p>ShowDetails is {showDetails}</p>\n    </div>\n  {/if}\n</div>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:8:11 The $ prefix is reserved, and cannot be used for variables and imports\nhttps://svelte.dev/e/dollar_prefix_invalid"
        ]
      }
    ]
  },
  {
    "testName": "snippets",
    "provider": "OpenRouter",
    "modelId": "baidu/ernie-4.5-21b-a3b",
    "numSamples": 10,
    "numCorrect": 0,
    "pass1": 0,
    "pass10": 0,
    "context": {
      "used": false,
      "content": ""
    },
    "samples": [
      {
        "index": 0,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  const title = (bookTitle) => \n    <span data-testid=\"book-title\">${bookTitle}</span>\n  ;\n</script>\n\n<ul>\n  {@each book in books}\n    <li data-testid=\"book-item\">{@html title(book)}</li>\n  {@each /}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:7:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ],
        "temperature": 0
      },
      {
        "index": 1,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  const title = ({ arg }) => {\n    return <span data-testid=\"book-title\">${arg}</span>;\n  };\n</script>\n\n<ul>\n  {$effect books.map(book => {\n    return {\n      {@render title(book)}\n    }\n  })}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:7:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 2,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  const title = ({ title }) => (\n    <span data-testid=\"book-title\">{title}</span>\n  );\n</script>\n\n<ul>\n  {@each book in books}\n    <li data-testid=\"book-item\">\n      {@render title(title: book)}\n    </li>\n  {@each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:7:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 3,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n  \n  const title = (book) => {\n    return <span data-testid=\"book-title\">${book}</span>;\n  };\n</script>\n\n<ul>\n  {@each book in books}\n    <li data-testid=\"book-item\">{@html title(book)}</li>\n  {@/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:7:11 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 4,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  const title = (bookTitle) => <span data-testid=\"book-title\">{bookTitle}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title(book)}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:6:31 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 5,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  const title = (book) => (\n    <span data-testid=\"book-title\">{book}</span>\n  );\n</script>\n\n<ul>\n  {@each book in books}\n    <li data-testid=\"book-item\">{$title(book)}</li>\n  {@end}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:7:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 6,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  const title = (book) => <span data-testid=\"book-title\">${book}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{[@render title](book)}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:6:26 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 7,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n\n  const title = ({ value }) => <span data-testid=\"book-title\">{value}</span>;\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render title value={book}}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:6:31 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 8,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const books = [\n    \"The Lord of the Rings\",\n    \"To Kill a Mockingbird\",\n    \"1984\"\n  ];\n\n  const title = (bookTitle) => (\n    <span data-testid=\"book-title\">{bookTitle}</span>\n  );\n</script>\n\n<ul>\n  {@each book in books}\n    <li data-testid=\"book-item\">{$title(book)}</li>\n  {@end}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:11:4 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      },
      {
        "index": 9,
        "code": "<svelte:options runes={true} />\n\n<script>\n  const titleMappings = {\n    title: (name) => <span data-testid=\"book-title\">${name}</span>\n  };\n\n  const books = [\"The Lord of the Rings\", \"To Kill a Mockingbird\", \"1984\"];\n</script>\n\n<ul>\n  {#each books as book}\n    <li data-testid=\"book-item\">{@render titleMapping={titleMappings} key={book} snippet=\"title\" params={new Map([[\"name\", book]])}}</li>\n  {/each}\n</ul>",
        "success": false,
        "errors": [
          "/Users/maxfarrell/Desktop/repos/forks/svelte-bench/tmp/samples/openrouter/Component.svelte:5:21 Unexpected token\nhttps://svelte.dev/e/js_parse_error"
        ]
      }
    ]
  }
]