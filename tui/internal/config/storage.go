package config

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// Config holds the application configuration
type Config struct {
	APIKeys          map[string]string
	LastProvider     string
	LastModel        string
	LastExecMode     string
	SaveToFile       bool
}

// Provider represents an LLM provider
type Provider struct {
	Name   string
	EnvKey string
	APIKey string
}

// AllProviders returns a list of all supported providers
func AllProviders() []Provider {
	return []Provider{
		{Name: "AI SDK", EnvKey: "AI_SDK_API_KEY"},
		{Name: "OpenAI", EnvKey: "OPENAI_API_KEY"},
		{Name: "Anthropic", EnvKey: "ANTHROPIC_API_KEY"},
		{Name: "Google (Gemini)", EnvKey: "GOOGLE_API_KEY"},
		{Name: "OpenRouter", EnvKey: "OPENROUTER_API_KEY"},
		{Name: "Groq", EnvKey: "GROQ_API_KEY"},
		{Name: "DeepSeek", EnvKey: "DEEPSEEK_API_KEY"},
		{Name: "xAI (Grok)", EnvKey: "XAI_API_KEY"},
		{Name: "Mistral", EnvKey: "MISTRAL_API_KEY"},
		{Name: "Cohere", EnvKey: "COHERE_API_KEY"},
		{Name: "Fireworks", EnvKey: "FIREWORKS_API_KEY"},
		{Name: "Moonshot", EnvKey: "MOONSHOT_API_KEY"},
		{Name: "Z.ai", EnvKey: "Z_AI_API_KEY"},
	}
}

// LoadFromEnv loads configuration from .env file
func LoadFromEnv() (*Config, error) {
	config := &Config{
		APIKeys: make(map[string]string),
	}

	envPath := filepath.Join(getProjectRoot(), ".env")

	file, err := os.Open(envPath)
	if err != nil {
		// .env doesn't exist, return empty config
		return config, nil
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())

		// Skip comments and empty lines
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		// Parse KEY=value
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Store API keys
		if strings.HasSuffix(key, "_API_KEY") {
			config.APIKeys[key] = value
		}

		// Load last used settings
		switch key {
		case "LAST_PROVIDER":
			config.LastProvider = value
		case "LAST_MODEL":
			config.LastModel = value
		case "LAST_EXECUTION_MODE":
			config.LastExecMode = value
		}
	}

	return config, scanner.Err()
}

// SaveToEnv saves configuration to .env file
func (c *Config) SaveToEnv() error {
	envPath := filepath.Join(getProjectRoot(), ".env")

	// Read existing file
	existing := make(map[string]string)
	file, err := os.Open(envPath)
	if err == nil {
		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			line := strings.TrimSpace(scanner.Text())
			if line != "" && !strings.HasPrefix(line, "#") {
				parts := strings.SplitN(line, "=", 2)
				if len(parts) == 2 {
					existing[strings.TrimSpace(parts[0])] = strings.TrimSpace(parts[1])
				}
			}
		}
		file.Close()
	}

	// Update with new values
	for key, value := range c.APIKeys {
		if value != "" {
			existing[key] = value
		}
	}

	if c.LastProvider != "" {
		existing["LAST_PROVIDER"] = c.LastProvider
	}
	if c.LastModel != "" {
		existing["LAST_MODEL"] = c.LastModel
	}
	if c.LastExecMode != "" {
		existing["LAST_EXECUTION_MODE"] = c.LastExecMode
	}

	// Write back
	outFile, err := os.Create(envPath)
	if err != nil {
		return err
	}
	defer outFile.Close()

	writer := bufio.NewWriter(outFile)

	// Write header comment
	fmt.Fprintln(writer, "# SvelteBench Configuration")
	fmt.Fprintln(writer, "# Generated by TUI")
	fmt.Fprintln(writer, "")

	// Write keys
	for key, value := range existing {
		fmt.Fprintf(writer, "%s=%s\n", key, value)
	}

	return writer.Flush()
}

// GetConfiguredProviders returns a list of providers with API keys set
func (c *Config) GetConfiguredProviders() []Provider {
	var configured []Provider

	for _, provider := range AllProviders() {
		if key, ok := c.APIKeys[provider.EnvKey]; ok && key != "" {
			provider.APIKey = key
			configured = append(configured, provider)
		}
	}

	return configured
}

// GetAllProvidersWithKeys returns all providers with their API keys if set
func (c *Config) GetAllProvidersWithKeys() []Provider {
	providers := AllProviders()
	for i := range providers {
		if key, ok := c.APIKeys[providers[i].EnvKey]; ok {
			providers[i].APIKey = key
		}
	}
	return providers
}

// HasAnyAPIKeys checks if any API keys are configured
func (c *Config) HasAnyAPIKeys() bool {
	for _, key := range c.APIKeys {
		if key != "" {
			return true
		}
	}
	return false
}

// getProjectRoot returns the project root directory
func getProjectRoot() string {
	// Get current working directory
	dir, err := os.Getwd()
	if err != nil {
		return "."
	}

	// If we're in tui/, go up one level
	if strings.HasSuffix(dir, "/tui") || strings.HasSuffix(dir, "\\tui") {
		return filepath.Join(dir, "..")
	}

	return dir
}
